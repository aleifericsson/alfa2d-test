(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([t.id,"body{\n    background-color: #242424;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;AAC7B",sourcesContent:["body{\n    background-color: #242424;\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);o&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=o.base?c[0]+o.base:c[0],u=i[l]||0,p="".concat(l," ").concat(u);i[l]=u+1;var d=n(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var m=r(h,o);o.byIndex=a,e.splice(a,0,{identifier:p,updater:m,references:1})}s.push(p)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=o(t,r),l=0;l<i.length;l++){var u=n(i[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!t;)t=o[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),o=n(795),r=n.n(o),i=n(569),s=n.n(i),a=n(565),c=n.n(a),l=n(216),u=n.n(l),p=n(589),d=n.n(p),h=n(426),m={};m.styleTagTransform=d(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=u(),e()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const f=(t,e)=>{t.appendChild(e)},v=(t,e)=>{t.removeChild(e)},g=t=>document.createElement(t),y=(t,e)=>{e.forEach((e=>{t.classList.add(e)}))},b=t=>document.querySelector(t),x=(t,e,n)=>{t.addEventListener(e,n)},w=(t,e)=>{t.style.cssText=e},C=(t,e,n)=>{e.map(((e,o)=>{t.setAttribute(e,n[o])}))},E=n.p+"d6da9f23976e4998ab40.png";function F(t,e,n,o,r,i,s){this.name=t,this.imgsrc=e,this.frames=n,this.size=r,this.currentFrame=0,this.x=i,this.y=s,this.twos=o,this.draw=function(t){let e=new Image;e.src=this.imgsrc;const n=this.size;let o;o=this.twos?Math.floor(this.currentFrame):this.currentFrame;const r=this.x,i=this.y;e.onload=function(){t.clearRect(r,i,n,n),t.drawImage(e,o*n,0,n,n,r,i,n,n)}},this.nextFrame=function(){this.twos?this.currentFrame+=.5:this.currentFrame+=1,this.currentFrame>=n&&(this.currentFrame=0)}}const A=[],I=n.p+"89cc97a32f3bdd1a1f7c.png";let $;const M=(t,e,n)=>{k($,t)},k=(t,e)=>{t.forEach(((t,n)=>{t.forEach(((t,o)=>{L(t,n,o,e)}))}))},L=(t,e,n,o)=>{const r=64;let i=new Image;i.src=I,i.onload=function(){o.drawImage(i,t*r,0,r,r,e*r,n*r,r,r)}},T=(t,e)=>{const n=Math.floor(e.x/64),o=Math.floor(e.y/64);let r=$[n][o];r++,20==r&&(r=0),((t,e,n)=>{$[t][e]=n})(n,o,r)},S=1e3/30;let R=window.performance.now();const j=(t,e,n)=>{const o=g("canvas");y(o,["game-canvas",`layer-${n}`]),C(o,["width","height"],[`${t}px`,`${e}px`]),w(o,"\n        position:absolute;\n    ");const r=o.getContext("2d");return(t=>{x(t,"click",(e=>{t.getContext("2d");const n=function(t,e){const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}(t,e);t.classList.contains("layer-1")&&T(0,n)}))})(o),0===n&&((t,e,n)=>{$=new Array(10).fill(0).map((()=>new Array(10).fill(10))),$[2][1]=11,$[9][9]=18,$[9][8]=18,$[8][8]=19,$[8][9]=19,console.log($),M(t)})(r),1===n&&(t=>{(()=>{const t=new F("coin_1",E,12,!0,64,50,50);A.push(t)})(),A.forEach((e=>{e.draw(t),e.nextFrame()}))})(r),o};const B=t=>{"slider1"===t.target.id?b(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(b(".button-overlay").style.left=`${t.target.value}px`)},N=n.p+"2ef5ad381915dbcfb9b2.png";window.performance.now();let z=[];function O(t,e,n){this.name=t,this.size=64,this.img=e,this.imgsrc=n,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*z.length;const e=this.size,n=this.name,o=g("canvas");y(o,["mini-canvas",`${n}`]),C(o,["width","height"],[`${e}px`,`${e}px`]),w(o,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const r=o.getContext("2d"),i=this.img;i.onload=function(){r.clearRect(0,0,e,e),r.drawImage(i,0,0,e,e,0,0,e,e)},this.canvele=o,this.ctx=r;const s=g("div");return w(s,`\n            position: absolute;\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0;\n        `),this.imgele=s,this.initMouse(o,s),s},this.initMouse=(t,e)=>{const n=t.getContext("2d");let o;const r=b(".layer-1");let i,s=[],a=this.size;const c=t=>{if("can"===this.name){let t=0;0===s.length&&s.push(setInterval((()=>{T(0,i);const e=this.img;n.clearRect(0,0,a,a),n.drawImage(e,t*a,0,a,a,0,0,a,a),console.log("bru"),t+=1,14===t&&(t=10)}),250))}},l=e=>{const n=document.body.getBoundingClientRect(),s=r.getBoundingClientRect();i={x:e.clientX-s.left,y:e.clientY-s.top},o={x:e.clientX-n.left,y:e.clientY-n.top},t.style.top=o.y-32+"px",t.style.left=o.x-32+"px"};e.addEventListener("mousedown",(e=>{f(document.body,t),document.body.addEventListener("mousemove",l),r.addEventListener("mouseenter",c)})),document.body.addEventListener("mouseup",(e=>{clearInterval(s[0]),s=[],null!=b(`.mini-canvas.${this.name}`)&&v(document.body,t),document.body.removeEventListener("mousemove",l),r.removeEventListener("mouseenter",c)}))}}const P=(t,e)=>{const n=new Image;n.src=e;const o=new O(t,n,e),r=o.init(z.length);return r.style.left=64*z.length+"px",z.push(o),r},Z=n.p+"5c2b4e04b636da0a95c6.png";let U;const q=(t,e)=>(U=g("div"),y(U,["button-overlay"]),w(U,`\n        min-height: ${e};\n        min-width: ${t};\n        position: absolute;\n    `),X(U),U),X=t=>{f(t,Y())},Y=()=>{const t=g("div");return t.id="promptbut1",w(t,`\n            position: absolute;\n            left: 16px;\n            top: 16px;\n            width: 32px;\n            height: 32px;\n            background: url(${Z}) -64px 0;\n        `),x(t,"click",_),t},_=t=>{if("promptbut1"===t.target.id||"closeprompt1"===t.target.id){const t=b(".prompt");null!=t?v(U,t):H("you have been prompted")}},H=t=>{const e=g("div");y(e,["prompt"]),w(e,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            border-radius: 5px;\n            position:absolute;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const n=g("div");n.id="closeprompt1",w(n,`\n            position: absolute;\n            left: 160px;\n            top: 10px;\n            width: 32px;\n            height: 32px;\n            background: url(${Z}) -128px 0;\n        `),f(e,n),x(n,"click",_),f(e,J(t)),f(U,e)},J=t=>{const e=g("div");return w(e,"\n            color:white;\n            position:relative;\n            text-align:center;\n            top:50%;\n        "),((t,e)=>{t.textContent=e})(e,t),e};var D;(()=>{const t=(()=>{const t=g("div");return y(t,["wrapper"]),w(t,"\n        position:relative;\n    "),f(document.body,t),t})(),e=j(640,640,0),n=j(640,640,1);f(t,e),f(t,n),console.log("commencing"),function(t,e,n){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-R;n<S||(R=e-n%S,t.map(((t,e)=>{const n=t.getContext("2d");0===e&&M(n),1===e&&(t=>{A.forEach((e=>{e.draw(t),e.nextFrame()}))})(n)})))};o()}([e,n]);const o=q(640,640);f(t,o)})(),D=(()=>{const t=g("div");return y(t,["mini-wrapper"]),w(t,"\n        position:relative;\n        background-color: #FFFFFF;\n        top: 650px;\n        height: 80px;\n        width: 640px;\n    "),f(document.body,t),t})(),f(D,P("can",N)),f(D,P("coin",E)),f(document.body,(()=>{const t=g("div");y(t,["debug-wrapper"]),w(t,"\n        position:relative;\n        top:660px;\n    ");const e=g("input");e.id="slider1",x(e,"input",B),C(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),f(t,e);const n=g("input");return n.id="slider2",x(n,"input",B),C(n,["type","min","max","value","class"],["range","0","640","0","slidey"]),f(t,n),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,