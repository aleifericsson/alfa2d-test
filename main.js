(()=>{"use strict";var t={320:(t,n,e)=>{e.d(n,{Z:()=>a});var r=e(537),o=e.n(r),i=e(645),s=e.n(i)()(o());s.push([t.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const a=s},414:(t,n,e)=>{e.d(n,{Z:()=>d});var r=e(537),o=e.n(r),i=e(645),s=e.n(i),a=e(667),c=e.n(a),l=new URL(e(542),e.b),u=s()(o()),p=c()(l);u.push([t.id,`@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const d=u},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},667:t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],u=i[l]||0,p="".concat(l," ").concat(u);i[l]=u+1;var d=e(p),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)n[d].references++,n[d].updater(m);else{var f=o(m,r);r.byIndex=a,n.splice(a,0,{identifier:p,updater:f,references:1})}s.push(p)}return s}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=e(i[s]);n[a].references--}for(var c=r(t,o),l=0;l<i.length;l++){var u=e(i[l]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},542:(t,n,e)=>{t.exports=e.p+"f78662ff4aad4d038806.ttf"}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const t=(t,n)=>{t.appendChild(n)},n=(t,n)=>{t.removeChild(n)},r=t=>document.createElement(t),o=(t,n)=>{n.forEach((n=>{t.classList.add(n)}))},i=(t,n)=>t.classList.contains(n),s=(t,n)=>{n.forEach((n=>{t.classList.remove(n)}))},a=t=>document.querySelector(t),c=(t,n)=>{t.textContent=n},l=(t,n,e)=>{t.addEventListener(n,e)},u=(t,n,e)=>{t.removeEventListener(n,e)},p=(t,n)=>{t.style.cssText=n},d=(t,n,e)=>{n.map(((n,r)=>{t.setAttribute(n,e[r])}))};var m=e(379),f=e.n(m),g=e(795),h=e.n(g),A=e(569),b=e.n(A),v=e(565),y=e.n(v),x=e(216),C=e.n(x),w=e(589),B=e.n(w),I=e(320),E={};E.styleTagTransform=B(),E.setAttributes=y(),E.insert=b().bind(null,"head"),E.domAPI=h(),E.insertStyleElement=C(),f()(I.Z,E),I.Z&&I.Z.locals&&I.Z.locals;var k=e(414),$={};$.styleTagTransform=B(),$.setAttributes=y(),$.insert=b().bind(null,"head"),$.domAPI=h(),$.insertStyleElement=C(),f()(k.Z,$),k.Z&&k.Z.locals&&k.Z.locals;const M=e.p+"2303bf42784ad28af8cb.gif";let R=-1;const T=(t="bruh")=>{R+=1,c("bruh"===t?a("#score"):t,`Score: ${R}`)},z=t=>{"slider1"===t.target.id?a(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(a(".button-overlay").style.left=`${t.target.value}px`)},_=e.p+"e112e84ea9b89a736591.png",S=e.p+"89cc97a32f3bdd1a1f7c.png";let j;const L=[11,14,15,16,19],Z=(t,n,e)=>{O(j,t)},O=(t,n)=>{t.forEach(((t,e)=>{t.forEach(((t,r)=>{P(t,e,r,n)}))}))},P=(t,n,e,r)=>{const o=64;let i=new Image;i.src=S,i.onload=function(){r.drawImage(i,t*o,0,o,o,n*o,e*o,o,o)}},F=e.p+"eed3668d18647392456b.png",D=e.p+"d6da9f23976e4998ab40.png";let U=[],N=[];const X=(n,e,i,s,a,c,l,u,m)=>{const f=r("canvas");o(f,["spritecanvas"]),d(f,["id","width","height"],[e,`${i}px`,`${i}px`]);const g=new Image;g.src=s,p(f,`\n        position:absolute;\n        pointer-events:none;\n        top: ${c}px;\n        left: ${a}px;\n    `);let h={name:e,size:i,ele:f,x:a,y:c,direction:"left",img:g,speed:l,direction_data:{none:0},draw_index:0,frame:0,show:u,frames:m,updates_per_frames:2,timer:1};if("car"===e&&(h.direction_data={left:0,downleft:1,down:2,upright:3,downright:4,upleft:5,up:6,right:7}),U.push(h),"coin"===e&&N.push(h),u){const e=f.getContext("2d");g.onload=function(){e.clearRect(0,0,i,i),e.drawImage(g,0,0,i,i,0,0,i,i)},t(n,f)}return f},Y=(e,r)=>{const o=a(".wrapper");U[e].show=r,r?(null===a(`#${U[e].name}`)&&t(o,U[e].ele),1===e&&q(1,1,"none")):null!==a(`#${U[e].name}`)&&n(o,U[e].ele)},q=(t,n,e)=>{let r=n;if("increment"===n&&(U[t].timer===U[t].updates_per_frames?(r=U[t].frame+1,U[t].frame=r,U[t].timer=1):U[t].timer+=1),r===U[t].frames&&(r="highlight"===U[t].name?1:0,U[t].frame=r),1===U[t].timer){U[t].direction=e;const n=U[t].direction_data[e];U[t].draw_index=n;const o=U[t].ele.getContext("2d"),i=U[t].size,s=U[t].img;o.clearRect(0,0,i,i),o.drawImage(s,i*r,i*n,i,i,0,0,i,i)}},H=(t,n,e)=>{p(U[t].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${n}px;\n    `)},J=t=>{const e=U.indexOf(t);if(e>-1){if("coin"===U[e].name){const n=N.indexOf(t);n>-1&&N.splice(n,1)}n(a(".wrapper"),U[e].ele),U.splice(e,1)}},K=(t,n)=>{const e=Math.floor(n.x/64),r=Math.floor(n.y/64);let o=j[e][r];o++,20==o&&(o=0),((t,n,e)=>{j[t][n]=e})(e,r,o)},G=1e3/30;let Q=window.performance.now();const V=(t,n,e)=>{const s=r("canvas");o(s,["game-canvas",`layer-${e}`]),d(s,["width","height"],[`${t}px`,`${n}px`]),p(s,"\n        position:absolute;\n    ");const a=s.getContext("2d");return(t=>{l(t,"click",(n=>{t.getContext("2d");const e=function(t,n){const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}}(t,n);i(t,"layer-1")&&K(0,e)}))})(s),0===e&&((t,n,e)=>{j=new Array(10).fill(0).map((()=>new Array(10).fill(10))),j[2][1]=11,j[9][9]=18,j[9][8]=18,j[8][8]=19,j[8][9]=19,console.log(j),Z(t)})(a),s};function W(t,n,e){const r=()=>{window.requestAnimationFrame(r);const n=window.performance.now(),e=n-Q;e<G||(Q=n-e%G,t.map(((t,n)=>{const e=t.getContext("2d");0===n&&Z(e)})),N.forEach((t=>{((t,n,e)=>{let r=n;if("increment"===n&&(t.timer===t.updates_per_frames?(r=t.frame+1,t.frame=r,t.timer=1):t.timer+=1),r===t.frames&&(r="highlight"===t.name?1:0,t.frame=r),1===t.timer){t.direction=e;const n=t.direction_data[e];t.draw_index=n;const o=t.ele.getContext("2d"),i=t.size,s=t.img;o.clearRect(0,0,i,i),o.drawImage(s,i*r,i*n,i,i,0,0,i,i)}})(t,"increment","none"),((t,n)=>{const e=t.ele.getBoundingClientRect(),r=n.getBoundingClientRect();!(e.right<r.left||e.left>r.right||e.bottom<r.top||e.top>r.bottom)&&(J(t),T())})(t,a("#car"))})))};r()}const tt=e.p+"2ef5ad381915dbcfb9b2.png";let nt=[];function et(e,i,s){this.name=e,this.size=64,this.img=i,this.imgsrc=s,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*nt.length;const n=this.size,e=this.name,i=r("canvas");o(i,["mini-canvas",`${e}`]),d(i,["width","height"],[`${n}px`,`${n}px`]),p(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const s=i.getContext("2d"),a=this.img;a.onload=function(){s.clearRect(0,0,n,n),s.drawImage(a,0,0,n,n,0,0,n,n)},this.canvele=i,this.ctx=s;const c=r("div");return o(c,["canvas-icon"]),p(c,`\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0, url(${F});\n        `),this.imgele=c,this.initMouse(i,c),c},this.initMouse=(r,o)=>{const s=r.getContext("2d");let c;const p=a(".layer-1");let d,m=[],f=this.size,g=this.currentFrame;const h=t=>{0===m.length&&m.push(setInterval((()=>{g+=1,"can"===this.name&&(K(0,d),14===g&&(g=10)),"coin"===this.name&&12===g&&(g=0);const t=this.img;s.clearRect(0,0,f,f),s.drawImage(t,g*f,0,f,f,0,0,f,f),this.currentFrame=g}),250))},A=t=>{t.preventDefault();const n=document.body.getBoundingClientRect(),e=p.getBoundingClientRect();d={x:t.clientX-e.left,y:t.clientY-e.top},c={x:t.clientX-n.left,y:t.clientY-n.top},r.style.top=c.y-32+"px",r.style.left=c.x-32+"px"};l(o,"mousedown",(n=>{let e=this.currentFrame;n.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",t(document.body,r),l(document.body,"mousemove",A),l(p,"mouseenter",h),s.clearRect(0,0,f,f),s.drawImage(i,e*f,0,f,f,0,0,f,f)})),l(document.body,"mouseup",(t=>{u(document.body,"mousemove",A),u(p,"mouseenter",h),0!==m.length&&"coin"===e&&X(a(".wrapper"),"coin",64,D,d.x-32,d.y-32,0,!0,12),clearInterval(m[0]),m=[],null!=a(`.mini-canvas.${this.name}`)&&n(document.body,r),s.clearRect(0,0,f,f)}))}}const rt=(t,n)=>{const e=new Image;e.src=n;const r=new et(t,e,n),o=r.init(nt.length);return nt.push(r),o},ot=e.p+"82e9ac88b221b8bd6b76.png",it=e.p+"9478dc13a48c1e0eaf79.png",st=t=>{if("promptbut1"===t.target.id||"closeprompt1"===t.target.id){const t=a(".prompt");null!=t?(o(t,["end-state"]),setTimeout((()=>n(document.body,t)),200)):at("you have been prompted")}},at=n=>{a(".button-overlay");const e=r("div");o(e,["prompt","start-state"]),d(e,["id","draggable"],["prompt1","false"]),p(e,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const i=lt();t(e,i),t(e,ct(n)),t(document.body,e),setTimeout((()=>e.classList.remove("start-state")),100)},ct=t=>{const n=r("div");return p(n,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n            font-family: 'munro';\n        "),c(n,t),n},lt=()=>{const n=r("div");o(n,["bar"]),d(n,["id","draggable"],["bar1","false"]),p(n,"\n        display:flex;\n        justify-content: flex-end;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n    ");const e=r("div");return o(e,["button","closeprompt"]),e.id="closeprompt1",p(e,`\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${it});\n    `),t(n,e),l(n,"mousedown",ut),l(n,"mouseup",dt),l(e,"click",st),n},ut=t=>{t.preventDefault(),l(document.body,"mousemove",pt),o(a("#prompt1"),["notransition"])},pt=t=>{t.preventDefault();const n=a("#prompt1"),e=document.body.getBoundingClientRect(),r=t.clientX-e.left,o=t.clientY-e.top;n.style.top=o-10+"px",n.style.left=r-100+"px"},dt=t=>{u(document.body,"mousemove",pt),s(a("#prompt1"),["notransition"])},mt=e.p+"57131d6cff9375848552.png";let ft,gt=!1,ht=[],At=-1;const bt=(t,n,e,i,s)=>{const a=r("div");return o(a,["button",t]),a.id=t,p(a,`\n            position: absolute;\n            left:${i}px;\n            top: ${s}px;\n            width: 32px;\n            height: 32px;\n            background: url(${ot}) -${32*n}px 0;\n        `),l(a,"click",e),a},vt=t=>{const n=a("#promptbut1");let e;for(i(n,"vibrate")&&s(n,["vibrate"]),setTimeout((()=>o(n,["vibrate"])),100),e=N.length-1;e>=0;e-=1)J(N[e])},yt=t=>{At+=1,2===At&&(At=-1);const n=a(".layer-1").getContext("2d");if(-1!==At){const t=new Image;t.src=mt,t.onload=function(){n.drawImage(t,320*At,0,320,320,0,0,640,640)}}else n.clearRect(0,0,640,640)},xt=t=>{const n=a("#pointer"),e=a(".layer-0").getBoundingClientRect();let r={x:0,y:0};const i=t=>{r={x:t.clientX-e.left,y:t.clientY-e.top}};i(t),gt?(gt=!1,s(n,["selected"]),clearInterval(ht[0]),ht=[],u(document,"mousemove",i),Y(1,!1)):(gt=!0,o(n,["selected"]),l(document.body,"mousemove",i),ht.push(setInterval((()=>{((t,n,e)=>{const r=U[t],o=n-r.x,i=e-r.y,s=Math.sqrt(o*o+i*i),a=o/s*r.speed,c=i/s*r.speed,l=r.x+a,u=r.y+c,p=U[t].size,d=((t,n)=>{const e=Math.floor(t/64),r=Math.floor(n/64);return j[e][r]})(l,u);if(s>r.speed&&!L.includes(d)){U[t].x=l,U[t].y=u,H(t,l-p/2,u-p/2);let n=Math.atan(-c/a);a<0&&(-c<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let e="left";n>=22.5&&n<=67.5?e="upright":n>=67.5&&n<=112.5?e="up":n>=112.5&&n<=157.5?e="upleft":n<=22.5&&n>=-22.5?e="right":n<=-22.5&&n>=-67.5?e="downright":n<=-67.5&&n>=-112.5?e="down":n<=-112.5&&n>=-157.5?e="downleft":n>=157.5&&n<=-157.5&&(e="left"),q(0,"increment",e)}})(0,r.x,r.y),q(1,"increment","none"),H(1,64*Math.floor(r.x/64),64*Math.floor(r.y/64))}),50)),Y(1,!0))},Ct=r("div");o(Ct,["game"]),t(document.body,Ct),p(Ct,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n"),t(Ct,(()=>{p(document.body,`\n        background-color: #242424;\n        background-image: url("${M}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=r("div");return o(n,["wrapper"]),p(n,"\n        position:relative;\n        left: -320px;\n    "),t(document.body,n),n})(),e=V(640,640,0),i=V(640,640,1);var s;t(n,e),t(n,i),X(s=n,"car",64,_,300,200,5,!0,3),X(s,"highlight",64,F,0,0,0,!1,8),X(s,"coin",64,D,400,500,0,!0,12),console.log("commencing"),W([e,i]);const a=(ft=r("div"),o(ft,["button-overlay"]),p(ft,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{t(n,bt("promptbut1",2,st,16,16)),t(n,bt("shaker",3,vt,16,80)),t(n,bt("pointer",7,xt,16,144)),t(n,bt("changebg",8,yt,16,208))})(ft),ft);return t(n,a),n})()),t(Ct,(()=>{const n=(()=>{const n=r("div");return o(n,["mini-wrapper"]),p(n,"\n        position:relative;\n        background-color: #000000;\n        top: 650px;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n    "),t(document.body,n),n})();return t(e=n,rt("can",tt)),t(e,rt("coin",D)),n;var e})()),t(Ct,(()=>{const n=(()=>{const n=r("div");o(n,["debug-wrapper"]),p(n,"\n        position:relative;\n        top:660px;\n    ");const e=r("input");e.id="slider1",l(e,"input",z),d(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,e);const i=r("input");i.id="slider2",l(i,"input",z),d(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,i);const s=r("h1");return s.id="score",p(s,"\n        color:white;\n        font-family: munro;\n    "),T(s),t(n,s),n})();return t(document.body,n),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,