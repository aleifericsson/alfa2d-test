(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([t.id,"body{\n    background-color: #242424;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;AAC7B",sourcesContent:["body{\n    background-color: #242424;\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);o&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],u=o.base?c[0]+o.base:c[0],l=i[u]||0,d="".concat(u," ").concat(l);i[u]=l+1;var p=n(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var h=r(f,o);o.byIndex=a,e.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=o(t,r),u=0;u<i.length;u++){var l=n(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!t;)t=o[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),o=n(795),r=n.n(o),i=n(569),s=n.n(i),a=n(565),c=n.n(a),u=n(216),l=n.n(u),d=n(589),p=n.n(d),f=n(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=s().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const m=(t,e)=>{t.appendChild(e)},v=t=>document.createElement(t),g=(t,e)=>{e.forEach((e=>{t.classList.add(e)}))},y=t=>document.querySelector(t),b=(t,e,n)=>{t.addEventListener(e,n)},w=(t,e)=>{t.style.cssText=e},x=(t,e,n)=>{e.map(((e,o)=>{t.setAttribute(e,n[o])}))},C=n.p+"d6da9f23976e4998ab40.png";function E(t,e,n,o,r,i,s){this.name=t,this.imgsrc=e,this.frames=n,this.size=r,this.currentFrame=0,this.x=i,this.y=s,this.twos=o,this.draw=function(t){let e=new Image;e.src=this.imgsrc;const n=this.size;let o;o=this.twos?Math.floor(this.currentFrame):this.currentFrame;const r=this.x,i=this.y;e.onload=function(){t.clearRect(r,i,n,n),t.drawImage(e,o*n,0,n,n,r,i,n,n)}},this.nextFrame=function(){this.twos?this.currentFrame+=.5:this.currentFrame+=1,this.currentFrame>=n&&(this.currentFrame=0)}}const F=[],A=n.p+"89cc97a32f3bdd1a1f7c.png";let I;const M=(t,e,n)=>{L(I,t)},L=(t,e)=>{t.forEach(((t,n)=>{t.forEach(((t,o)=>{T(t,n,o,e)}))}))},T=(t,e,n,o)=>{const r=64;let i=new Image;i.src=A,i.onload=function(){o.drawImage(i,t*r,0,r,r,e*r,n*r,r,r)}},S=(t,e)=>{const n=Math.floor(e.x/64),o=Math.floor(e.y/64);let r=I[n][o];r++,20==r&&(r=0),((t,e,n)=>{I[t][e]=n})(n,o,r)},$=1e3/30;let R=window.performance.now();const j=(t,e,n)=>{const o=v("canvas");g(o,["game-canvas",`layer-${n}`]),x(o,["width","height"],[`${t}px`,`${e}px`]),w(o,"\n        position:absolute;\n    ");const r=o.getContext("2d");return(t=>{b(t,"click",(e=>{t.getContext("2d");const n=function(t,e){const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}(t,e);t.classList.contains("layer-1")&&S(0,n)}))})(o),0===n&&((t,e,n)=>{I=new Array(10).fill(0).map((()=>new Array(10).fill(10))),I[2][1]=11,I[9][9]=18,I[9][8]=18,I[8][8]=19,I[8][9]=19,console.log(I),M(t)})(r),1===n&&(t=>{(()=>{const t=new E("coin_1",C,12,!0,64,50,50);F.push(t)})(),F.forEach((e=>{e.draw(t),e.nextFrame()}))})(r),o};n.p;const k=t=>{y(".layer-1").style.left=`${t.target.value}px`},B=n.p+"2ef5ad381915dbcfb9b2.png";window.performance.now();let N=[];function z(t,e,n){this.name=t,this.size=64,this.img=e,this.imgsrc=n,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*N.length;const e=this.size,n=this.name,o=v("canvas");g(o,["mini-canvas",`${n}`]),x(o,["width","height"],[`${e}px`,`${e}px`]),w(o,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const r=o.getContext("2d"),i=this.img;i.onload=function(){r.clearRect(0,0,e,e),r.drawImage(i,0,0,e,e,0,0,e,e)},this.canvele=o,this.ctx=r;const s=v("div");return w(s,`\n            position: absolute;\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0;\n        `),this.imgele=s,this.initMouse(o,s),s},this.initMouse=(t,e)=>{const n=t.getContext("2d");let o;const r=y(".layer-1");let i,s=[],a=this.size;const c=t=>{if("can"===this.name){let t=0;0===s.length&&s.push(setInterval((()=>{S(0,i);const e=this.img;n.clearRect(0,0,a,a),n.drawImage(e,t*a,0,a,a,0,0,a,a),console.log("bru"),t+=1,14===t&&(t=10)}),250))}},u=e=>{const n=document.body.getBoundingClientRect(),s=r.getBoundingClientRect();i={x:e.clientX-s.left,y:e.clientY-s.top},o={x:e.clientX-n.left,y:e.clientY-n.top},t.style.top=o.y-32+"px",t.style.left=o.x-32+"px"};e.addEventListener("mousedown",(e=>{m(document.body,t),document.body.addEventListener("mousemove",u),r.addEventListener("mouseenter",c)})),document.body.addEventListener("mouseup",(e=>{var n,o;clearInterval(s[0]),s=[],null!=y(`.mini-canvas.${this.name}`)&&(n=document.body,o=t,n.removeChild(o)),document.body.removeEventListener("mousemove",u),r.removeEventListener("mouseenter",c)}))}}const O=(t,e)=>{const n=new Image;n.src=e;const o=new z(t,n,e),r=o.init(N.length);return r.style.left=64*N.length+"px",N.push(o),r};var P;(()=>{const t=640,e=(()=>{const t=v("div");return g(t,["wrapper"]),w(t,"\n        position:relative;\n    "),m(document.body,t),t})(),n=j(t,t,0),o=j(t,t,1);m(e,n),m(e,o),console.log("commencing"),function(t,e,n){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-R;n<$||(R=e-n%$,t.map(((t,e)=>{const n=t.getContext("2d");0===e&&M(n),1===e&&(t=>{F.forEach((e=>{e.draw(t),e.nextFrame()}))})(n)})))};o()}([n,o])})(),P=(()=>{const t=v("div");return g(t,["mini-wrapper"]),w(t,"\n        position:relative;\n        background-color: #FFFFFF;\n        top: 650px;\n        height: 80px;\n        width: 640px;\n    "),m(document.body,t),t})(),m(P,O("can",B)),m(P,O("coin",C)),m(document.body,(()=>{const t=v("div");g(t,["debug-wrapper"]),w(t,"\n        position:relative;\n        top:660px;\n    ");const e=v("input");return b(e,"input",k),x(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),m(t,e),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,