(()=>{"use strict";var t={320:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(t,n,e)=>{e.d(n,{Z:()=>d});var r=e(537),o=e.n(r),i=e(645),a=e.n(i),s=e(667),c=e.n(s),l=new URL(e(542),e.b),p=a()(o()),u=c()(l);p.push([t.id,`@font-face {\n    font-family: 'munro';\n    src: url(${u}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const d=p},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var p=[].concat(t[l]);r&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),n.push(p))}},n}},667:t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],p=i[l]||0,u="".concat(l," ").concat(p);i[l]=p+1;var d=e(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)n[d].references++,n[d].updater(m);else{var f=o(m,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var c=r(t,o),l=0;l<i.length;l++){var p=e(i[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},542:(t,n,e)=>{t.exports=e.p+"f78662ff4aad4d038806.ttf"}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const t=(t,n)=>{t.appendChild(n)},n=(t,n)=>{t.removeChild(n)},r=t=>document.createElement(t),o=(t,n)=>{n.forEach((n=>{t.classList.add(n)}))},i=(t,n)=>t.classList.contains(n),a=(t,n)=>{n.forEach((n=>{t.classList.remove(n)}))},s=t=>document.querySelector(t),c=(t,n)=>{t.textContent=n},l=(t,n,e)=>{t.addEventListener(n,e)},p=(t,n,e)=>{t.removeEventListener(n,e)},u=(t,n)=>{t.style.cssText=n},d=(t,n,e)=>{n.map(((n,r)=>{t.setAttribute(n,e[r])}))},m=e.p+"9478dc13a48c1e0eaf79.png";let f=0;const g=t=>{let e=0,r="";"string"==typeof t||t instanceof String?("win"===t&&(e=2,r="you won!"),"tutorial"===t&&(e=3,r="welcome! how to play: find out!")):"promptbut-1"===t.target.id||"closeprompt-1"===t.target.id?(e=1,r="you have been prompted"):"closeprompt-2"===t.target.id?e=2:"closeprompt-3"===t.target.id&&(e=3);const i=s(`#prompt-${e}`);null!=i?(o(i,["end-state"]),setTimeout((()=>n(s(".wrapper"),i)),200)):h(r,e)},h=(n,e)=>{s(".button-overlay");const i=r("div");o(i,["prompt","start-state"]),d(i,["id","draggable"],[`prompt-${e}`,"false"]),u(i,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const a=b(e);t(i,a),t(i,A(n)),t(s(".wrapper"),i),setTimeout((()=>i.classList.remove("start-state")),100)},A=t=>{const n=r("div");return u(n,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n            font-family: 'munro';\n        "),c(n,t),n},b=n=>{const e=r("div");o(e,["bar"]),d(e,["id","draggable"],[`bar-${n}`,"false"]),u(e,"\n        display:flex;\n        justify-content: flex-end;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n    ");const i=r("div");return o(i,["button","closeprompt"]),i.id=`closeprompt-${n}`,u(i,`\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${m});\n    `),t(e,i),l(e,"mousedown",v),l(e,"mouseup",x),l(i,"click",g),e},v=t=>{const n=t.target.id.split("-")[1];f=n,t.preventDefault(),l(document.body,"mousemove",y),o(s(`#prompt-${n}`),["notransition"])},y=t=>{t.preventDefault();const n=s(`#prompt-${f}`),e=s(".wrapper").getBoundingClientRect(),r=t.clientX-e.left,o=t.clientY-e.top;null!==n&&(n.style.top=o-10+"px",n.style.left=r-100+"px")},x=t=>{p(document.body,"mousemove",y),a(s(`#prompt-${f}`),["notransition"]),f=0};var C=e(379),w=e.n(C),B=e(795),I=e.n(B),$=e(569),E=e.n($),k=e(565),M=e.n(k),R=e(216),T=e.n(R),z=e(589),_=e.n(z),S=e(320),j={};j.styleTagTransform=_(),j.setAttributes=M(),j.insert=E().bind(null,"head"),j.domAPI=I(),j.insertStyleElement=T(),w()(S.Z,j),S.Z&&S.Z.locals&&S.Z.locals;var L=e(414),Z={};Z.styleTagTransform=_(),Z.setAttributes=M(),Z.insert=E().bind(null,"head"),Z.domAPI=I(),Z.insertStyleElement=T(),w()(L.Z,Z),L.Z&&L.Z.locals&&L.Z.locals;const O=e.p+"2303bf42784ad28af8cb.gif";let P=-1;const F=(t="bruh")=>{P+=1,c("bruh"===t?s("#score"):t,`Score: ${P}`)},D=t=>{"slider1"===t.target.id?s(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(s(".button-overlay").style.left=`${t.target.value}px`)},U=e.p+"e112e84ea9b89a736591.png",N=e.p+"89cc97a32f3bdd1a1f7c.png";let X;const Y=[11,14,15,16,19],q=(t,n,e)=>{H(X,t)},H=(t,n)=>{t.forEach(((t,e)=>{t.forEach(((t,r)=>{J(t,e,r,n)}))}))},J=(t,n,e,r)=>{const o=64;let i=new Image;i.src=N,i.onload=function(){r.drawImage(i,t*o,0,o,o,n*o,e*o,o,o)}},K=e.p+"eed3668d18647392456b.png",G=e.p+"d6da9f23976e4998ab40.png";let Q=[],V=[];const W=(n,e,i,a,s,c,l,p,m)=>{const f=r("canvas");o(f,["spritecanvas"]),d(f,["id","width","height"],[e,`${i}px`,`${i}px`]);const g=new Image;g.src=a,u(f,`\n        position:absolute;\n        pointer-events:none;\n        top: ${c}px;\n        left: ${s}px;\n    `);let h={name:e,size:i,ele:f,x:s,y:c,direction:"left",img:g,speed:l,direction_data:{none:0},draw_index:0,frame:0,show:p,frames:m,updates_per_frames:2,timer:1};if("car"===e&&(h.direction_data={left:0,downleft:1,down:2,upright:3,downright:4,upleft:5,up:6,right:7}),Q.push(h),"coin"===e&&V.push(h),p){const e=f.getContext("2d");g.onload=function(){e.clearRect(0,0,i,i),e.drawImage(g,0,0,i,i,0,0,i,i)},t(n,f)}return f},tt=(e,r)=>{const o=s(".wrapper");Q[e].show=r,r?(null===s(`#${Q[e].name}`)&&t(o,Q[e].ele),1===e&&nt(1,1,"none")):null!==s(`#${Q[e].name}`)&&n(o,Q[e].ele)},nt=(t,n,e)=>{let r=n;if("increment"===n&&(Q[t].timer===Q[t].updates_per_frames?(r=Q[t].frame+1,Q[t].frame=r,Q[t].timer=1):Q[t].timer+=1),r===Q[t].frames&&(r="highlight"===Q[t].name?1:0,Q[t].frame=r),1===Q[t].timer){Q[t].direction=e;const n=Q[t].direction_data[e];Q[t].draw_index=n;const o=Q[t].ele.getContext("2d"),i=Q[t].size,a=Q[t].img;o.clearRect(0,0,i,i),o.drawImage(a,i*r,i*n,i,i,0,0,i,i)}},et=(t,n,e)=>{u(Q[t].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${n}px;\n    `)},rt=t=>{const e=Q.indexOf(t);if(e>-1){if("coin"===Q[e].name){const n=V.indexOf(t);n>-1&&V.splice(n,1)}n(s(".wrapper"),Q[e].ele),Q.splice(e,1)}},ot=(t,n)=>{const e=Math.floor(n.x/64),r=Math.floor(n.y/64);let o=X[e][r];o++,20==o&&(o=0),((t,n,e)=>{X[t][n]=e})(e,r,o)},it=1e3/30;let at=window.performance.now();const st=(t,n,e)=>{const a=r("canvas");o(a,["game-canvas",`layer-${e}`]),d(a,["width","height"],[`${t}px`,`${n}px`]),u(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(t=>{l(t,"click",(n=>{t.getContext("2d");const e=function(t,n){const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}}(t,n);i(t,"layer-1")&&ot(0,e)}))})(a),0===e&&((t,n,e)=>{X=new Array(10).fill(0).map((()=>new Array(10).fill(10))),X[2][1]=11,X[9][9]=18,X[9][8]=18,X[8][8]=19,X[8][9]=19,console.log(X),q(t)})(s),a};function ct(t,n,e){const r=()=>{window.requestAnimationFrame(r);const n=window.performance.now(),e=n-at;e<it||(at=n-e%it,t.map(((t,n)=>{const e=t.getContext("2d");0===n&&q(e)})),V.forEach((t=>{((t,n,e)=>{let r=n;if("increment"===n&&(t.timer===t.updates_per_frames?(r=t.frame+1,t.frame=r,t.timer=1):t.timer+=1),r===t.frames&&(r="highlight"===t.name?1:0,t.frame=r),1===t.timer){t.direction=e;const n=t.direction_data[e];t.draw_index=n;const o=t.ele.getContext("2d"),i=t.size,a=t.img;o.clearRect(0,0,i,i),o.drawImage(a,i*r,i*n,i,i,0,0,i,i)}})(t,"increment","none"),((t,n)=>{const e=t.ele.getBoundingClientRect(),r=n.getBoundingClientRect();!(e.right<r.left||e.left>r.right||e.bottom<r.top||e.top>r.bottom)&&(rt(t),F(),10===P&&g("win"))})(t,s("#car"))})))};r()}const lt=e.p+"2ef5ad381915dbcfb9b2.png";let pt=[];function ut(e,i,a){this.name=e,this.size=64,this.img=i,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*pt.length;const n=this.size,e=this.name,i=r("canvas");o(i,["mini-canvas",`${e}`]),d(i,["width","height"],[`${n}px`,`${n}px`]),u(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=i.getContext("2d"),s=this.img;s.onload=function(){a.clearRect(0,0,n,n),a.drawImage(s,0,0,n,n,0,0,n,n)},this.canvele=i,this.ctx=a;const c=r("div");return o(c,["canvas-icon"]),u(c,`\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0, url(${K});\n        `),this.imgele=c,this.initMouse(i,c),c},this.initMouse=(r,o)=>{const a=r.getContext("2d");let c;const u=s(".layer-1");let d,m=[],f=this.size,g=this.currentFrame;const h=t=>{0===m.length&&m.push(setInterval((()=>{g+=1,"can"===this.name&&(ot(0,d),14===g&&(g=10)),"coin"===this.name&&12===g&&(g=0);const t=this.img;a.clearRect(0,0,f,f),a.drawImage(t,g*f,0,f,f,0,0,f,f),this.currentFrame=g}),250))},A=t=>{t.preventDefault();const n=document.body.getBoundingClientRect(),e=u.getBoundingClientRect();d={x:t.clientX-e.left,y:t.clientY-e.top},c={x:t.clientX-n.left,y:t.clientY-n.top},r.style.top=c.y-32+"px",r.style.left=c.x-32+"px"};l(o,"mousedown",(n=>{let e=this.currentFrame;n.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",t(document.body,r),l(document.body,"mousemove",A),l(u,"mouseenter",h),a.clearRect(0,0,f,f),a.drawImage(i,e*f,0,f,f,0,0,f,f)})),l(document.body,"mouseup",(t=>{p(document.body,"mousemove",A),p(u,"mouseenter",h),0!==m.length&&"coin"===e&&W(s(".wrapper"),"coin",64,G,d.x-32,d.y-32,0,!0,12),clearInterval(m[0]),m=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,r),a.clearRect(0,0,f,f)}))}}const dt=(t,n)=>{const e=new Image;e.src=n;const r=new ut(t,e,n),o=r.init(pt.length);return pt.push(r),o},mt=e.p+"82e9ac88b221b8bd6b76.png",ft=e.p+"57131d6cff9375848552.png";let gt,ht=!1,At=[],bt=-1;const vt=(t,n,e,i,a)=>{const s=r("div");return o(s,["button",t]),s.id=t,u(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${mt}) -${32*n}px 0;\n        `),l(s,"click",e),s},yt=t=>{const n=s("#promptbut-1");let e;for(i(n,"vibrate")&&a(n,["vibrate"]),setTimeout((()=>o(n,["vibrate"])),100),e=V.length-1;e>=0;e-=1)rt(V[e])},xt=t=>{bt+=1,2===bt&&(bt=-1);const n=s(".layer-1").getContext("2d");if(-1!==bt){const t=new Image;t.src=ft,t.onload=function(){n.drawImage(t,320*bt,0,320,320,0,0,640,640)}}else n.clearRect(0,0,640,640)},Ct=t=>{const n=s("#pointer"),e=s(".layer-0").getBoundingClientRect();let r={x:0,y:0};const i=t=>{r={x:t.clientX-e.left,y:t.clientY-e.top}};i(t),ht?(ht=!1,a(n,["selected"]),clearInterval(At[0]),At=[],p(document,"mousemove",i),tt(1,!1)):(ht=!0,o(n,["selected"]),l(document.body,"mousemove",i),At.push(setInterval((()=>{((t,n,e)=>{const r=Q[t],o=n-r.x,i=e-r.y,a=Math.sqrt(o*o+i*i),s=o/a*r.speed,c=i/a*r.speed,l=r.x+s,p=r.y+c,u=Q[t].size,d=((t,n)=>{const e=Math.floor(t/64),r=Math.floor(n/64);return X[e][r]})(l,p);if(a>r.speed&&!Y.includes(d)){Q[t].x=l,Q[t].y=p,et(t,l-u/2,p-u/2);let n=Math.atan(-c/s);s<0&&(-c<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let e="left";n>=22.5&&n<=67.5?e="upright":n>=67.5&&n<=112.5?e="up":n>=112.5&&n<=157.5?e="upleft":n<=22.5&&n>=-22.5?e="right":n<=-22.5&&n>=-67.5?e="downright":n<=-67.5&&n>=-112.5?e="down":n<=-112.5&&n>=-157.5?e="downleft":n>=157.5&&n<=-157.5&&(e="left"),nt(0,"increment",e)}})(0,r.x,r.y),nt(1,"increment","none"),et(1,64*Math.floor(r.x/64),64*Math.floor(r.y/64))}),50)),tt(1,!0))},wt=r("div");o(wt,["game"]),t(document.body,wt),u(wt,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n"),t(wt,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${O}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=r("div");return o(n,["wrapper"]),u(n,"\n        position:relative;\n        left: -320px;\n    "),t(document.body,n),n})(),e=st(640,640,0),i=st(640,640,1);var a;t(n,e),t(n,i),W(a=n,"car",64,U,300,200,5,!0,3),W(a,"highlight",64,K,0,0,0,!1,8),W(a,"coin",64,G,400,500,0,!0,12),console.log("commencing"),ct([e,i]);const s=(gt=r("div"),o(gt,["button-overlay"]),u(gt,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{t(n,vt("promptbut-1",2,g,16,16)),t(n,vt("shaker",3,yt,16,80)),t(n,vt("pointer",7,Ct,16,144)),t(n,vt("changebg",8,xt,16,208))})(gt),gt);return t(n,s),n})()),t(wt,(()=>{const n=(()=>{const n=r("div");return o(n,["mini-wrapper"]),u(n,"\n        position:relative;\n        background-color: #000000;\n        top: 650px;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n    "),t(document.body,n),n})();return t(e=n,dt("can",lt)),t(e,dt("coin",G)),n;var e})()),t(wt,(()=>{const n=(()=>{const n=r("div");o(n,["debug-wrapper"]),u(n,"\n        position:relative;\n        top:660px;\n    ");const e=r("input");e.id="slider1",l(e,"input",D),d(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,e);const i=r("input");i.id="slider2",l(i,"input",D),d(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,i);const a=r("h1");return a.id="score",u(a,"\n        color:white;\n        font-family: munro;\n    "),F(a),t(n,a),n})();return t(document.body,n),n})()),g("tutorial")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,