(()=>{"use strict";var t={320:(t,n,e)=>{e.d(n,{Z:()=>s});var o=e(537),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([t.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(t,n,e)=>{e.d(n,{Z:()=>u});var o=e(537),r=e.n(o),i=e(645),a=e.n(i),s=e(667),c=e.n(s),l=new URL(e(542),e.b),p=a()(r()),d=c()(l);p.push([t.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${d}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=p},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var p=[].concat(t[l]);o&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),n.push(p))}},n}},667:t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],l=o.base?c[0]+o.base:c[0],p=i[l]||0,d="".concat(l," ").concat(p);i[l]=p+1;var u=e(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(f);else{var m=r(f,o);o.byIndex=s,n.splice(s,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var c=o(t,r),l=0;l<i.length;l++){var p=e(i[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},542:(t,n,e)=>{t.exports=e.p+"f78662ff4aad4d038806.ttf"}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return t[o](i,i.exports,e),i.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!t;)t=o[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const t=(t,n)=>{t.appendChild(n)},n=(t,n)=>{t.removeChild(n)},o=t=>document.createElement(t),r=(t,n)=>{n.forEach((n=>{t.classList.add(n)}))},i=(t,n)=>t.classList.contains(n),a=(t,n)=>{n.forEach((n=>{t.classList.remove(n)}))},s=t=>document.querySelector(t),c=(t,n)=>{t.textContent=n},l=(t,n,e)=>{t.addEventListener(n,e)},p=(t,n,e)=>{t.removeEventListener(n,e)},d=(t,n)=>{t.style.cssText=n},u=(t,n,e)=>{n.map(((n,o)=>{t.setAttribute(n,e[o])}))};var f=e(379),m=e.n(f),g=e(795),h=e.n(g),b=e(569),A=e.n(b),v=e(565),x=e.n(v),y=e(216),w=e.n(y),C=e(589),B=e.n(C),k=e(320),I={};I.styleTagTransform=B(),I.setAttributes=x(),I.insert=A().bind(null,"head"),I.domAPI=h(),I.insertStyleElement=w(),m()(k.Z,I),k.Z&&k.Z.locals&&k.Z.locals;var $=e(414),E={};E.styleTagTransform=B(),E.setAttributes=x(),E.insert=A().bind(null,"head"),E.domAPI=h(),E.insertStyleElement=w(),m()($.Z,E),$.Z&&$.Z.locals&&$.Z.locals;const M=e.p+"2303bf42784ad28af8cb.gif";let T=-1;const R=(t="bruh")=>{T+=1,c("bruh"===t?s("#score"):t,`Score: ${T}`)},z=t=>{"slider1"===t.target.id?s(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(s(".button-overlay").style.left=`${t.target.value}px`)},S=e.p+"9478dc13a48c1e0eaf79.png",_=e.p+"46f9a3232743a28fe55c.mp3",j=e.p+"f6a9d30b202864f403ab.mp3",L=e.p+"4b0a7fa0436041018c59.mp3",N=e.p+"2313cadcd41e0912116a.mp3",P=e.p+"db5db37355927833123f.mp3",Z=e.p+"9a548da064d95ad7ec01.mp3";let O=[];const F=(t,n)=>{var e=new Audio(t);O.push({audio:e,name:n})},D=t=>{O.find((n=>n.name===t)).audio.play()};let U=0;const q=t=>{let e=0,o="";"string"==typeof t||t instanceof String?("win"===t&&(e=2,o="you won!"),"tutorial"===t&&(e=3,o="welcome! how to play: find out!")):(i(t.target,"closeprompt")&&D("close"),"promptbut-1"===t.target.id||"closeprompt-1"===t.target.id?(e=1,o="you have been prompted"):"closeprompt-2"===t.target.id?e=2:"closeprompt-3"===t.target.id&&(e=3));const a=s(`#prompt-${e}`);null!=a?(r(a,["end-state"]),setTimeout((()=>n(s(".wrapper"),a)),200)):X(o,e)},X=(n,e)=>{s(".button-overlay");const i=o("div");r(i,["prompt","start-state"]),u(i,["id","draggable"],[`prompt-${e}`,"false"]),d(i,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const a=H(e);t(i,a),t(i,Y(n)),t(s(".wrapper"),i),setTimeout((()=>i.classList.remove("start-state")),100)},Y=t=>{const n=o("div");return d(n,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n            font-family: 'munro';\n        "),c(n,t),n},H=n=>{const e=o("div");r(e,["bar"]),u(e,["id","draggable"],[`bar-${n}`,"false"]),d(e,"\n        display:flex;\n        justify-content: flex-end;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n    ");const i=o("div");return r(i,["button","closeprompt"]),i.id=`closeprompt-${n}`,d(i,`\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${S});\n    `),t(e,i),l(e,"mousedown",J),l(e,"mouseup",G),l(i,"click",q),e},J=t=>{const n=t.target.id.split("-")[1];U=n,t.preventDefault(),l(document.body,"mousemove",K),r(s(`#prompt-${n}`),["notransition"])},K=t=>{t.preventDefault();const n=s(`#prompt-${U}`),e=s(".wrapper").getBoundingClientRect(),o=t.clientX-e.left,r=t.clientY-e.top;null!==n&&(n.style.top=r-10+"px",n.style.left=o-100+"px")},G=t=>{p(document.body,"mousemove",K),a(s(`#prompt-${U}`),["notransition"]),U=0},Q=e.p+"e112e84ea9b89a736591.png",V=e.p+"89cc97a32f3bdd1a1f7c.png";let W;const tt=[11,14,15,16,19],nt=(t,n,e)=>{et(W,t)},et=(t,n)=>{t.forEach(((t,e)=>{t.forEach(((t,o)=>{ot(t,e,o,n)}))}))},ot=(t,n,e,o)=>{const r=64;let i=new Image;i.src=V,i.onload=function(){o.drawImage(i,t*r,0,r,r,n*r,e*r,r,r)}},rt=e.p+"eed3668d18647392456b.png",it=e.p+"d6da9f23976e4998ab40.png";let at=[],st=[];const ct=(n,e,i,a,s,c,l,p,f)=>{const m=o("canvas");r(m,["spritecanvas"]),u(m,["id","width","height"],[e,`${i}px`,`${i}px`]);const g=new Image;g.src=a,d(m,`\n        position:absolute;\n        pointer-events:none;\n        top: ${c}px;\n        left: ${s}px;\n    `);let h={name:e,size:i,ele:m,x:s,y:c,direction:"left",img:g,speed:l,direction_data:{none:0},draw_index:0,frame:0,show:p,frames:f,updates_per_frames:2,timer:1};if("car"===e&&(h.direction_data={left:0,downleft:1,down:2,upright:3,downright:4,upleft:5,up:6,right:7}),at.push(h),"coin"===e&&st.push(h),p){const e=m.getContext("2d");g.onload=function(){e.clearRect(0,0,i,i),e.drawImage(g,0,0,i,i,0,0,i,i)},t(n,m)}return m},lt=(e,o)=>{const r=s(".wrapper");at[e].show=o,o?(null===s(`#${at[e].name}`)&&t(r,at[e].ele),1===e&&pt(1,1,"none")):null!==s(`#${at[e].name}`)&&n(r,at[e].ele)},pt=(t,n,e)=>{let o=n;if("increment"===n&&(at[t].timer===at[t].updates_per_frames?(o=at[t].frame+1,at[t].frame=o,at[t].timer=1):at[t].timer+=1),o===at[t].frames&&(o="highlight"===at[t].name?1:0,at[t].frame=o),1===at[t].timer){at[t].direction=e;const n=at[t].direction_data[e];at[t].draw_index=n;const r=at[t].ele.getContext("2d"),i=at[t].size,a=at[t].img;r.clearRect(0,0,i,i),r.drawImage(a,i*o,i*n,i,i,0,0,i,i)}},dt=(t,n,e)=>{d(at[t].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${n}px;\n    `)},ut=t=>{const e=at.indexOf(t);if(e>-1){if("coin"===at[e].name){const n=st.indexOf(t);n>-1&&st.splice(n,1)}n(s(".wrapper"),at[e].ele),at.splice(e,1)}},ft=e.p+"0cb172c3af037a285502.png";let mt=0,gt=[];const ht=t=>{D("swipe"),Number.isInteger(t)&&(mt=t),console.log(mt);const n=vt(gt[mt]);mt+=1,l(n,"click",bt)},bt=t=>{D("swipe");let e=t.target;i(e,"dialogue")||(e=e.parentNode,i(e,"dialogue")||(e=e.parentNode)),p(e,"click",bt),r(e,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),e),gt[mt-1].follow&&ht()}),200)},At=(t,n,e,o,r)=>{gt.push({text:t,code:e,charactersrc:o,follow:r,charname:n})},vt=n=>{const e=o("div");return r(e,["dialogue","dialogue-start-end"]),u(e,["id","draggable"],[`dialogue-${n.code}`,"false"]),d(e,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n        "),t(e,xt(n.charactersrc)),t(e,yt(n.text,n.charname)),t(s(".game"),e),setTimeout((()=>e.classList.remove("dialogue-start-end")),100),e},xt=t=>{const n=o("div");return r(n,["charBox"]),d(n,`\n        border: 5px solid darkslategray;\n        width: 64px;\n        height: 64px;\n        background: url(${t}) 0 0;\n    `),n},yt=(n,e)=>{const r=o("div"),i=o("div"),a=o("div");return d(r,"\n        position:relative;\n        top: -10px;\n    "),d(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),d(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),c(i,n),c(a,e),t(r,a),t(r,i),r},wt=t=>{switch(t){case"start":q("tutorial"),ht(0);break;case"win":q("win"),d(document.body,"\n                background-image: none;\n                background-color: #476336;\n            ")}},Ct=(t,n)=>{const e=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=W[e][o];r++,20==r&&(r=0),((t,n,e)=>{W[t][n]=e})(e,o,r)},Bt=1e3/30;let kt=window.performance.now();const It=(t,n,e)=>{const a=o("canvas");r(a,["game-canvas",`layer-${e}`]),u(a,["width","height"],[`${t}px`,`${n}px`]),d(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(t=>{l(t,"click",(n=>{t.getContext("2d");const e=function(t,n){const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}}(t,n);i(t,"layer-1")&&Ct(0,e)}))})(a),0===e&&((t,n,e)=>{W=new Array(10).fill(0).map((()=>new Array(10).fill(10))),W[2][1]=11,W[9][9]=18,W[9][8]=18,W[8][8]=19,W[8][9]=19,console.log(W),nt(t)})(s),a};const $t=e.p+"2ef5ad381915dbcfb9b2.png";let Et=[];function Mt(e,i,f){this.name=e,this.size=64,this.img=i,this.imgsrc=f,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*Et.length;const n=this.size,e=this.name,i=o("canvas");r(i,["mini-canvas",`${e}`]),u(i,["width","height"],[`${n}px`,`${n}px`]),d(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=i.getContext("2d"),s=this.img;s.onload=function(){a.clearRect(0,0,n,n),a.drawImage(s,0,0,n,n,0,0,n,n)},this.canvele=i,this.ctx=a;const c=o("div");return r(c,["canvas-icon"]),c.id=e,d(c,`\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0, url(${rt});\n        `),c.dataset.imgsrc=this.imgsrc,this.imgele=c,this.initMouse(i,c),c},this.initMouse=(u,f)=>{const m=u.getContext("2d");let g;const h=s(".layer-1");let b,A=[],v=this.size,x=this.currentFrame;const y=t=>{0===A.length&&A.push(setInterval((()=>{x+=1,"can"===this.name&&(Ct(0,b),14===x&&(x=10)),"coin"===this.name&&12===x&&(x=0);const t=this.img;m.clearRect(0,0,v,v),m.drawImage(t,x*v,0,v,v,0,0,v,v),this.currentFrame=x}),250))},w=t=>{t.preventDefault();const n=document.body.getBoundingClientRect(),e=h.getBoundingClientRect();b={x:t.clientX-e.left,y:t.clientY-e.top},g={x:t.clientX-n.left,y:t.clientY-n.top},u.style.top=g.y-32+"px",u.style.left=g.x-32+"px"};l(f,"mousedown",(n=>{let e=this.currentFrame;n.preventDefault(),u.style.top="-1000px",u.style.left="-1000px",t(document.body,u),l(document.body,"mousemove",w),l(h,"mouseenter",y),m.clearRect(0,0,v,v),m.drawImage(i,e*v,0,v,v,0,0,v,v)})),l(document.body,"mouseup",(t=>{p(document.body,"mousemove",w),p(h,"mouseenter",y),0!==A.length&&"coin"===e&&ct(s(".wrapper"),"coin",64,it,b.x-32,b.y-32,0,!0,12),clearInterval(A[0]),A=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,u),m.clearRect(0,0,v,v)})),l(f,"mouseenter",(n=>{((n,e)=>{const i=e.cloneNode(!1);i.id="infoPic",a(i,["canvas-icon"]),d(i,`\n        height:64px;\n        width:64px;\n        background: url(${i.dataset.imgsrc});\n    `);const l=s(".infoTop");l.textContent="";const p=o("div");r(p,["infoTitle"]),c(p,n),d(p,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    ");const u=o("div");r(u,["infoText"]),d(u,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n    "),"can"===n?c(u,"the can is for water"):"coin"===n&&c(u,"the coin is for car somehow"),t(l,p),t(l,i),t(l,u)})(n.target.id,n.target)}))}}const Tt=(t,n)=>{const e=new Image;e.src=n;const o=new Mt(t,e,n),r=o.init(Et.length);return Et.push(o),r},Rt=e.p+"82e9ac88b221b8bd6b76.png",zt=n=>{const e=o("div");let i;r(e,["shader"]),e.id=n,"light-shader"===n?i="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(i="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),d(e,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        ${i}\n    `),t(s(".shadwrap"),e)},St=n=>{const e=o("div");r(e,["level","shader"]),e.id=n,d(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),"level-1"===n?t(e,jt(0,256,640,64)):"level-2"===n&&t(e,jt(0,128,640,64)),t(s(".shadwrap"),e)},_t=()=>{const t=(".shader",document.querySelectorAll(".shader"));const e=s(".shadwrap");t.forEach((t=>{n(e,t)}))},jt=(t,n,e,i)=>{const a=o("div");return r(a,["pathblock"]),d(a,`\n        background-color: rgba(245, 66, 66, 0.5);\n        left: ${t}px;\n        top: ${n}px;\n        height: ${i}px;\n        width: ${e}px;\n        position:absolute;\n    `),a};let Lt,Nt=!1,Pt=[],Zt=-1;const Ot=(t,n,e,i,a)=>{const s=o("div");return r(s,["button",t]),s.id=t,d(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${Rt}) -${32*n}px 0;\n        `),l(s,"click",e),s},Ft=t=>{const n=s("#promptbut-1");let e;for(i(n,"vibrate")&&a(n,["vibrate"]),setTimeout((()=>r(n,["vibrate"])),100),e=st.length-1;e>=0;e-=1)ut(st[e])},Dt=t=>{Zt+=1,2===Zt&&(Zt=-1,_t()),0===Zt?(zt("light-shader"),St("level-1")):1===Zt&&(_t(),St("level-2"),zt("dark-shader"))},Ut=t=>{const n=s("#pointer"),e=s(".layer-0").getBoundingClientRect();let o={x:0,y:0};const i=t=>{o={x:t.clientX-e.left,y:t.clientY-e.top}};i(t),Nt?(Nt=!1,a(n,["selected"]),clearInterval(Pt[0]),Pt=[],p(document,"mousemove",i),lt(1,!1)):(Nt=!0,r(n,["selected"]),l(document.body,"mousemove",i),Pt.push(setInterval((()=>{((t,n,e)=>{const o=at[t],r=n-o.x,i=e-o.y,a=Math.sqrt(r*r+i*i),s=r/a*o.speed,c=i/a*o.speed,l=o.x+s,p=o.y+c,d=at[t].size,u=((t,n)=>{const e=Math.floor(t/64),o=Math.floor(n/64);return W[e][o]})(l,p);if(a>o.speed&&!tt.includes(u)){at[t].x=l,at[t].y=p,dt(t,l-d/2,p-d/2);let n=Math.atan(-c/s);s<0&&(-c<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let e="left";n>=22.5&&n<=67.5?e="upright":n>=67.5&&n<=112.5?e="up":n>=112.5&&n<=157.5?e="upleft":n<=22.5&&n>=-22.5?e="right":n<=-22.5&&n>=-67.5?e="downright":n<=-67.5&&n>=-112.5?e="down":n<=-112.5&&n>=-157.5?e="downleft":n>=157.5&&n<=-157.5&&(e="left"),pt(0,"increment",e)}})(0,o.x,o.y),pt(1,"increment","none"),dt(1,64*Math.floor(o.x/64),64*Math.floor(o.y/64))}),50)),lt(1,!0))},qt=o("div");r(qt,["game"]),t(document.body,qt),d(qt,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),t(qt,(()=>{d(document.body,`\n        background-color: #242424;\n        background-image: url("${M}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),d(n,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),t(document.body,n),n})(),e=It(640,640,0),i=It(640,640,1);var a;t(n,e),t(n,i),ct(a=n,"car",64,Q,300,200,5,!0,3),ct(a,"highlight",64,rt,0,0,0,!1,8),ct(a,"coin",64,it,400,500,0,!0,12),(n=>{const e=o("div");r(e,["shadwrap"]),d(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),t(n,e)})(n),console.log("commencing"),function(t,n,e){const o=()=>{window.requestAnimationFrame(o);const n=window.performance.now(),e=n-kt;e<Bt||(kt=n-e%Bt,t.map(((t,n)=>{const e=t.getContext("2d");0===n&&nt(e)})),st.forEach((t=>{((t,n,e)=>{let o=n;if("increment"===n&&(t.timer===t.updates_per_frames?(o=t.frame+1,t.frame=o,t.timer=1):t.timer+=1),o===t.frames&&(o="highlight"===t.name?1:0,t.frame=o),1===t.timer){t.direction=e;const n=t.direction_data[e];t.draw_index=n;const r=t.ele.getContext("2d"),i=t.size,a=t.img;r.clearRect(0,0,i,i),r.drawImage(a,i*o,i*n,i,i,0,0,i,i)}})(t,"increment","none"),((t,n)=>{const e=t.ele.getBoundingClientRect(),o=n.getBoundingClientRect();return!(e.right<o.left||e.left>o.right||e.bottom<o.top||e.top>o.bottom)})(t,s("#car"))&&(ut(t),R(),D("coin"),10===T&&wt("win"))})))};o()}([e,i]);const c=(Lt=o("div"),r(Lt,["button-overlay"]),d(Lt,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{t(n,Ot("promptbut-1",2,q,16,16)),t(n,Ot("shaker",3,Ft,16,80)),t(n,Ot("pointer",7,Ut,16,144)),t(n,Ot("changebg",8,Dt,16,208))})(Lt),Lt);return t(n,c),n})()),t(qt,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),d(n,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),t(document.body,n),n})();return t(e=n,Tt("can",$t)),t(e,Tt("coin",it)),At("man","shadow",0,ft,!0),At("life can be tough","shadow",1,ft,!1),At("you aint half bad bro","shadow",2,ft,!1),(()=>{const n=o("div");r(n,["infoScreen"]),d(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),t(n,(()=>{const t=o("div");return r(t,["infoTop"]),d(t,"\n        padding: 5px;\n    "),t})()),t(n,(()=>{const t=o("div");return r(t,["infoBottom"]),t})()),t(s(".wrapper"),(()=>{const t=o("div");return r(t,["infoLeft"]),d(t,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),c(t,"😊"),t})()),t(s(".wrapper"),n)})(),F(j,"click"),F(_,"close"),F(L,"coin"),F(N,"epic"),F(P,"swipe"),F(Z,"open"),n;var e})()),t(qt,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),d(n,"\n        position:relative;\n        top:660px;\n    ");const e=o("input");e.id="slider1",l(e,"input",z),u(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,e);const i=o("input");i.id="slider2",l(i,"input",z),u(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,i);const a=o("h1");return a.id="score",d(a,"\n        color:white;\n        font-family: munro;\n    "),R(a),t(n,a),n})();return t(document.body,n),n})()),wt("start")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,