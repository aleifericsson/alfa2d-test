(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>a});var r=e(537),o=e.n(r),i=e(645),s=e.n(i)()(o());s.push([t.id,"body{\n    background-color: #242424;\n}\n\n.start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;AAC7B;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:["body{\n    background-color: #242424;\n}\n\n.start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var p=[].concat(t[l]);r&&s[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),n.push(p))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],p=i[l]||0,u="".concat(l," ").concat(p);i[l]=p+1;var d=e(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)n[d].references++,n[d].updater(m);else{var f=o(m,r);r.byIndex=a,n.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=e(i[s]);n[a].references--}for(var c=r(t,o),l=0;l<i.length;l++){var p=e(i[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),o=e.n(r),i=e(569),s=e.n(i),a=e(565),c=e.n(a),l=e(216),p=e.n(l),u=e(589),d=e.n(u),m=e(426),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const h=(t,n)=>{t.appendChild(n)},g=(t,n)=>{t.removeChild(n)},A=t=>document.createElement(t),v=(t,n)=>{n.forEach((n=>{t.classList.add(n)}))},b=(t,n)=>t.classList.contains(n),y=(t,n)=>{n.forEach((n=>{t.classList.remove(n)}))},x=t=>document.querySelector(t),C=(t,n,e)=>{t.addEventListener(n,e)},B=(t,n,e)=>{t.removeEventListener(n,e)},w=(t,n)=>{t.style.cssText=n},I=(t,n,e)=>{n.map(((n,r)=>{t.setAttribute(n,e[r])}))},E=e.p+"d6da9f23976e4998ab40.png",k=e.p+"e112e84ea9b89a736591.png";function M(t,n,e,r,o,i,s){this.name=t,this.imgsrc=n,this.frames=e,this.size=o,this.currentFrame=0,this.x=i,this.y=s,this.twos=r,this.draw=function(t){let n=new Image;n.src=this.imgsrc;const e=this.size;let r;r=this.twos?Math.floor(this.currentFrame):this.currentFrame;const o=this.x,i=this.y;n.onload=function(){t.clearRect(o,i,e,e),t.drawImage(n,r*e,0,e,e,o,i,e,e)}},this.nextFrame=function(){this.twos?this.currentFrame+=.5:this.currentFrame+=1,this.currentFrame>=e&&(this.currentFrame=0)}}const F=[],$=e.p+"89cc97a32f3bdd1a1f7c.png";let L;const R=(t,n,e)=>{T(L,t)},T=(t,n)=>{t.forEach(((t,e)=>{t.forEach(((t,r)=>{z(t,e,r,n)}))}))},z=(t,n,e,r)=>{const o=64;let i=new Image;i.src=$,i.onload=function(){r.drawImage(i,t*o,0,o,o,n*o,e*o,o,o)}},S=(t,n)=>{const e=Math.floor(n.x/64),r=Math.floor(n.y/64);let o=L[e][r];o++,20==o&&(o=0),((t,n,e)=>{L[t][n]=e})(e,r,o)},j=1e3/30;let P=window.performance.now();const O=(t,n,e)=>{const r=A("canvas");v(r,["game-canvas",`layer-${e}`]),I(r,["width","height"],[`${t}px`,`${n}px`]),w(r,"\n        position:absolute;\n    ");const o=r.getContext("2d");return(t=>{C(t,"click",(n=>{t.getContext("2d");const e=function(t,n){const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}}(t,n);b(t,"layer-1")&&S(0,e)}))})(r),0===e&&((t,n,e)=>{L=new Array(10).fill(0).map((()=>new Array(10).fill(10))),L[2][1]=11,L[9][9]=18,L[9][8]=18,L[8][8]=19,L[8][9]=19,console.log(L),R(t)})(o),1===e&&(t=>{(()=>{const t=new M("coin_1",E,12,!0,64,50,50);F.push(t)})(),F.forEach((n=>{n.draw(t),n.nextFrame()}))})(o),r};const N=t=>{"slider1"===t.target.id?x(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(x(".button-overlay").style.left=`${t.target.value}px`)},D=e.p+"2ef5ad381915dbcfb9b2.png";let X=[];function Y(t,n,e){this.name=t,this.size=64,this.img=n,this.imgsrc=e,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*X.length;const n=this.size,e=this.name,r=A("canvas");v(r,["mini-canvas",`${e}`]),I(r,["width","height"],[`${n}px`,`${n}px`]),w(r,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const o=r.getContext("2d"),i=this.img;i.onload=function(){o.clearRect(0,0,n,n),o.drawImage(i,0,0,n,n,0,0,n,n)},this.canvele=r,this.ctx=o;const s=A("div");return v(s,["canvas-icon"]),w(s,`\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0, rgba(255,255,255,0.5);\n        `),this.imgele=s,this.initMouse(r,s),s},this.initMouse=(t,e)=>{const r=t.getContext("2d");let o;const i=x(".layer-1");let s,a=[],c=this.size,l=0;const p=t=>{"can"===this.name&&0===a.length&&a.push(setInterval((()=>{S(0,s);const t=this.img;l+=1,14===l&&(l=10),r.clearRect(0,0,c,c),r.drawImage(t,l*c,0,c,c,0,0,c,c)}),250))},u=n=>{n.preventDefault();const e=document.body.getBoundingClientRect(),r=i.getBoundingClientRect();s={x:n.clientX-r.left,y:n.clientY-r.top},o={x:n.clientX-e.left,y:n.clientY-e.top},t.style.top=o.y-32+"px",t.style.left=o.x-32+"px"};e.addEventListener("mousedown",(e=>{e.preventDefault(),t.style.top="0px",t.style.left="0px",h(document.body,t),document.body.addEventListener("mousemove",u),i.addEventListener("mouseenter",p),r.clearRect(0,0,c,c),r.drawImage(n,0*c,0,c,c,0,0,c,c)})),document.body.addEventListener("mouseup",(n=>{document.body.removeEventListener("mousemove",u),i.removeEventListener("mouseenter",p),clearInterval(a[0]),a=[],null!=x(`.mini-canvas.${this.name}`)&&g(document.body,t),r.clearRect(0,0,c,c)}))}}const Z=(t,n)=>{const e=new Image;e.src=n;const r=new Y(t,e,n),o=r.init(X.length);return X.push(r),o},q=e.p+"82e9ac88b221b8bd6b76.png",U=e.p+"9478dc13a48c1e0eaf79.png",_=t=>{if("promptbut1"===t.target.id||"closeprompt1"===t.target.id){const t=x(".prompt");null!=t?(v(t,["end-state"]),setTimeout((()=>g(document.body,t)),200)):H("you have been prompted")}},H=t=>{x(".button-overlay");const n=A("div");v(n,["prompt","start-state"]),I(n,["id","draggable"],["prompt1","false"]),w(n,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            border-radius: 5px;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const e=J();h(n,e),h(n,V(t)),h(document.body,n),setTimeout((()=>n.classList.remove("start-state")),100)},J=()=>{const t=A("div");v(t,["bar"]),I(t,["id","draggable"],["bar1","false"]),w(t,"\n        display:flex;\n        justify-content: flex-end;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n    ");const n=A("div");return v(n,["button","closeprompt"]),n.id="closeprompt1",w(n,`\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${U});\n    `),h(t,n),C(t,"mousedown",K),C(t,"mouseup",Q),C(n,"click",_),t},K=t=>{t.preventDefault(),C(document.body,"mousemove",G),v(x("#prompt1"),["notransition"])},G=t=>{t.preventDefault();const n=x("#prompt1"),e=document.body.getBoundingClientRect(),r=t.clientX-e.left,o=t.clientY-e.top;n.style.top=o-10+"px",n.style.left=r-100+"px"},Q=t=>{B(document.body,"mousemove",G),y(x("#prompt1"),["notransition"])},V=t=>{const n=A("div");return w(n,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n        "),((t,n)=>{t.textContent=n})(n,t),n};let W=[];let tt,nt=!1,et=[];const rt=(t,n,e,r,o)=>{const i=A("div");return v(i,["button",t]),i.id=t,w(i,`\n            position: absolute;\n            left:${r}px;\n            top: ${o}px;\n            width: 32px;\n            height: 32px;\n            background: url(${q}) -${32*n}px 0;\n        `),C(i,"click",e),i},ot=t=>{const n=x("#promptbut1");b(n,"vibrate")&&y(n,["vibrate"]),setTimeout((()=>v(n,["vibrate"])),100)},it=t=>{const n=x("#pointer"),e=document.body.getBoundingClientRect();let r={x:0,y:0};const o=t=>{r={x:t.clientX-e.left,y:t.clientY-e.top}};nt?(nt=!1,y(n,["selected"]),clearInterval(et[0]),et=[],B(document,"mousemove",o)):(nt=!0,v(n,["selected"]),C(document.body,"mousemove",o),et.push(setInterval((()=>{((t,n,e)=>{const r=W[0],o=r.ele,i=n-r.x,s=e-r.y,a=Math.sqrt(i*i+s*s),c=i/a*r.speed,l=s/a*r.speed,p=r.x+c,u=r.y+l;W[0].x=p,W[0].y=u,w(o,`\n        position:absolute;\n        top: ${u}px;\n        left: ${p}px;\n    `);let d=Math.atan(-l/c);c<0&&(-l<0?d-=Math.PI:d+=Math.PI),d*=180/Math.PI;let m="left";d>=22.5&&d<=67.5?m="upright":d>=67.5&&d<=112.5?m="up":d>=112.5&&d<=157.5?m="upleft":d<=22.5&&d>=-22.5?m="right":d<=-22.5&&d>=-67.5?m="downright":d<=-67.5&&d>=-112.5?m="down":d<=-112.5&&d>=-157.5?m="downleft":d>=157.5&&d<=-157.5&&(m="left"),W[0].direction=m})(0,r.x,r.y)}),50)))};var st;(()=>{const t=(()=>{const t=A("div");return v(t,["wrapper"]),w(t,"\n        position:relative;\n    "),h(document.body,t),t})(),n=O(640,640,0),e=O(640,640,1);h(t,n),h(t,e),((t,n,e,r,o,i,s)=>{const a=A("canvas");v(a,["spritecanvas"]),I(a,["id","width","height"],["car","64px","64px"]);const c=new Image;c.src=r;const l=a.getContext("2d");c.onload=function(){l.clearRect(0,0,e,e),l.drawImage(c,0,0,e,e,0,0,e,e)},w(a,"\n        position:absolute;\n        top: 200px;\n        left: 300px;\n    "),W.push({name:"car",ele:a,x:300,y:200,direction:"left",img:c,speed:5}),h(t,a)})(t,0,64,k),console.log("commencing"),function(t,n,e){const r=()=>{window.requestAnimationFrame(r);const n=window.performance.now(),e=n-P;e<j||(P=n-e%j,t.map(((t,n)=>{const e=t.getContext("2d");0===n&&R(e),1===n&&(t=>{F.forEach((n=>{n.draw(t),n.nextFrame()}))})(e)})))};r()}([n,e]);const r=(tt=A("div"),v(tt,["button-overlay"]),w(tt,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(t=>{h(t,rt("promptbut1",2,_,16,16)),h(t,rt("shaker",3,ot,16,64)),h(t,rt("pointer",7,it,16,112))})(tt),tt);h(t,r)})(),st=(()=>{const t=A("div");return v(t,["mini-wrapper"]),w(t,"\n        position:relative;\n        background-color: #FFFFFF;\n        top: 650px;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n    "),h(document.body,t),t})(),h(st,Z("can",D)),h(st,Z("coin",E)),h(document.body,(()=>{const t=A("div");v(t,["debug-wrapper"]),w(t,"\n        position:relative;\n        top:660px;\n    ");const n=A("input");n.id="slider1",C(n,"input",N),I(n,["type","min","max","value","class"],["range","0","640","0","slidey"]),h(t,n);const e=A("input");return e.id="slider2",C(e,"input",N),I(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),h(t,e),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,