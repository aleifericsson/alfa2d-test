(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"body{\n    background-color: #242424;\n}\n\n.start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n  }","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;AAC7B;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;EAClC",sourcesContent:["body{\n    background-color: #242424;\n}\n\n.start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n  }"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var p=n(d),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var h=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=r(t,o),l=0;l<a.length;l++){var u=n(a[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),a=n(569),i=n.n(a),s=n(565),c=n.n(s),l=n(216),u=n.n(l),d=n(589),p=n.n(d),m=n(426),h={};h.styleTagTransform=p(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=(t,e)=>{t.appendChild(e)},g=(t,e)=>{t.removeChild(e)},v=t=>document.createElement(t),y=(t,e)=>{e.forEach((e=>{t.classList.add(e)}))},A=(t,e)=>t.classList.contains(e),b=t=>document.querySelector(t),x=(t,e,n)=>{t.addEventListener(e,n)},w=(t,e)=>{t.style.cssText=e},C=(t,e,n)=>{e.map(((e,r)=>{t.setAttribute(e,n[r])}))},E=n.p+"d6da9f23976e4998ab40.png";function I(t,e,n,r,o,a,i){this.name=t,this.imgsrc=e,this.frames=n,this.size=o,this.currentFrame=0,this.x=a,this.y=i,this.twos=r,this.draw=function(t){let e=new Image;e.src=this.imgsrc;const n=this.size;let r;r=this.twos?Math.floor(this.currentFrame):this.currentFrame;const o=this.x,a=this.y;e.onload=function(){t.clearRect(o,a,n,n),t.drawImage(e,r*n,0,n,n,o,a,n,n)}},this.nextFrame=function(){this.twos?this.currentFrame+=.5:this.currentFrame+=1,this.currentFrame>=n&&(this.currentFrame=0)}}const B=[],F=n.p+"89cc97a32f3bdd1a1f7c.png";let k;const M=(t,e,n)=>{$(k,t)},$=(t,e)=>{t.forEach(((t,n)=>{t.forEach(((t,r)=>{T(t,n,r,e)}))}))},T=(t,e,n,r)=>{const o=64;let a=new Image;a.src=F,a.onload=function(){r.drawImage(a,t*o,0,o,o,e*o,n*o,o,o)}},L=(t,e)=>{const n=Math.floor(e.x/64),r=Math.floor(e.y/64);let o=k[n][r];o++,20==o&&(o=0),((t,e,n)=>{k[t][e]=n})(n,r,o)},S=1e3/30;let R=window.performance.now();const j=(t,e,n)=>{const r=v("canvas");y(r,["game-canvas",`layer-${n}`]),C(r,["width","height"],[`${t}px`,`${e}px`]),w(r,"\n        position:absolute;\n    ");const o=r.getContext("2d");return(t=>{x(t,"click",(e=>{t.getContext("2d");const n=function(t,e){const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}(t,e);A(t,"layer-1")&&L(0,n)}))})(r),0===n&&((t,e,n)=>{k=new Array(10).fill(0).map((()=>new Array(10).fill(10))),k[2][1]=11,k[9][9]=18,k[9][8]=18,k[8][8]=19,k[8][9]=19,console.log(k),M(t)})(o),1===n&&(t=>{(()=>{const t=new I("coin_1",E,12,!0,64,50,50);B.push(t)})(),B.forEach((e=>{e.draw(t),e.nextFrame()}))})(o),r};const O=t=>{"slider1"===t.target.id?b(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(b(".button-overlay").style.left=`${t.target.value}px`)},N=n.p+"2ef5ad381915dbcfb9b2.png";let z=[];function P(t,e,n){this.name=t,this.size=64,this.img=e,this.imgsrc=n,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*z.length;const e=this.size,n=this.name,r=v("canvas");y(r,["mini-canvas",`${n}`]),C(r,["width","height"],[`${e}px`,`${e}px`]),w(r,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const o=r.getContext("2d"),a=this.img;a.onload=function(){o.clearRect(0,0,e,e),o.drawImage(a,0,0,e,e,0,0,e,e)},this.canvele=r,this.ctx=o;const i=v("div");return w(i,`\n            position: absolute;\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0;\n        `),this.imgele=i,this.initMouse(r,i),i},this.initMouse=(t,e)=>{const n=t.getContext("2d");let r;const o=b(".layer-1");let a,i=[],s=this.size;const c=t=>{if("can"===this.name){let t=0;0===i.length&&i.push(setInterval((()=>{L(0,a);const e=this.img;n.clearRect(0,0,s,s),n.drawImage(e,t*s,0,s,s,0,0,s,s),t+=1,14===t&&(t=10)}),250))}},l=e=>{const n=document.body.getBoundingClientRect(),i=o.getBoundingClientRect();a={x:e.clientX-i.left,y:e.clientY-i.top},r={x:e.clientX-n.left,y:e.clientY-n.top},t.style.top=r.y-32+"px",t.style.left=r.x-32+"px"};e.addEventListener("mousedown",(e=>{f(document.body,t),document.body.addEventListener("mousemove",l),o.addEventListener("mouseenter",c)})),document.body.addEventListener("mouseup",(e=>{clearInterval(i[0]),i=[],null!=b(`.mini-canvas.${this.name}`)&&g(document.body,t),document.body.removeEventListener("mousemove",l),o.removeEventListener("mouseenter",c)}))}}const Z=(t,e)=>{const n=new Image;n.src=e;const r=new P(t,n,e),o=r.init(z.length);return o.style.left=64*z.length+"px",z.push(r),o},U=n.p+"5c2b4e04b636da0a95c6.png";let q;const X=t=>{if("promptbut1"===t.target.id||"closeprompt1"===t.target.id){const t=b(".prompt");null!=t?(y(t,["end-state"]),setTimeout((()=>g(document.body,t)),200)):Y("you have been prompted")}},Y=t=>{q=b(".button-overlay");const e=v("div");y(e,["prompt","start-state"]),w(e,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            border-radius: 5px;\n            position:absolute;\n            transition: 0.3s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const n=v("div");n.id="closeprompt1",w(n,`\n            position: absolute;\n            left: 160px;\n            top: 10px;\n            width: 32px;\n            height: 32px;\n            background: url(${U}) -128px 0;\n        `),f(e,n),x(n,"click",X),f(e,_(t)),f(document.body,e),setTimeout((()=>e.classList.remove("start-state")),100)},_=t=>{const e=v("div");return w(e,"\n            color:white;\n            position:relative;\n            text-align:center;\n            top:50%;\n        "),((t,e)=>{t.textContent=e})(e,t),e};let H;const J=(t,e,n,r,o)=>{const a=v("div");return a.id=t,w(a,`\n            position: absolute;\n            left:${r}px;\n            top: ${o}px;\n            width: 32px;\n            height: 32px;\n            background: url(${U}) -${32*e}px 0;\n        `),x(a,"click",n),a},K=t=>{const e=b("#promptbut1");var n;A(e,"vibrate")&&(n=e,["vibrate"].forEach((t=>{n.classList.remove(t)}))),setTimeout((()=>y(e,["vibrate"])),100)};var D;(()=>{const t=(()=>{const t=v("div");return y(t,["wrapper"]),w(t,"\n        position:relative;\n    "),f(document.body,t),t})(),e=j(640,640,0),n=j(640,640,1);f(t,e),f(t,n),console.log("commencing"),function(t,e,n){const r=()=>{window.requestAnimationFrame(r);const e=window.performance.now(),n=e-R;n<S||(R=e-n%S,t.map(((t,e)=>{const n=t.getContext("2d");0===e&&M(n),1===e&&(t=>{B.forEach((e=>{e.draw(t),e.nextFrame()}))})(n)})))};r()}([e,n]);const r=(H=v("div"),y(H,["button-overlay"]),w(H,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(t=>{f(t,J("promptbut1",2,X,16,16)),f(t,J("shaker",3,K,16,64))})(H),H);f(t,r)})(),D=(()=>{const t=v("div");return y(t,["mini-wrapper"]),w(t,"\n        position:relative;\n        background-color: #FFFFFF;\n        top: 650px;\n        height: 80px;\n        width: 640px;\n    "),f(document.body,t),t})(),f(D,Z("can",N)),f(D,Z("coin",E)),f(document.body,(()=>{const t=v("div");y(t,["debug-wrapper"]),w(t,"\n        position:relative;\n        top:660px;\n    ");const e=v("input");e.id="slider1",x(e,"input",O),C(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),f(t,e);const n=v("input");return n.id="slider2",x(n,"input",O),C(n,["type","min","max","value","class"],["range","0","640","0","slidey"]),f(t,n),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,