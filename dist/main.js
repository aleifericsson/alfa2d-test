(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"body{\n    background-color: #242424;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;AAC7B",sourcesContent:["body{\n    background-color: #242424;\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],l=i[u]||0,p="".concat(u," ").concat(l);i[u]=l+1;var d=n(p),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var h=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var c=r(t,o),u=0;u<i.length;u++){var l=n(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),c=n.n(s),u=n(216),l=n.n(u),p=n(589),d=n.n(p),f=n(426),h={};h.styleTagTransform=d(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),e()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const m=(t,e)=>{t.appendChild(e)},g=t=>document.createElement(t),v=(t,e)=>{e.forEach((e=>{t.classList.add(e)}))},y=(t,e,n)=>{t.addEventListener(e,n)},w=(t,e)=>{t.style.cssText=e},b=(t,e,n)=>{e.map(((e,r)=>{t.setAttribute(e,n[r])}))},x=n.p+"d6da9f23976e4998ab40.png";function F(t,e,n,r,o,i,a){this.name=t,this.imgsrc=e,this.frames=n,this.size=o,this.currentFrame=0,this.x=i,this.y=a,this.twos=r,this.draw=function(t){let e=new Image;e.src=this.imgsrc;const n=this.size;let r;r=this.twos?Math.floor(this.currentFrame):this.currentFrame;const o=this.x,i=this.y;e.onload=function(){t.clearRect(o,i,n,n),t.drawImage(e,r*n,0,n,n,o,i,n,n)}},this.nextFrame=function(){this.twos?this.currentFrame+=.5:this.currentFrame+=1,this.currentFrame>=n&&(this.currentFrame=0)}}const A=[],C=n.p+"89cc97a32f3bdd1a1f7c.png";let E;const I=(t,e,n)=>{M(E,t)},M=(t,e)=>{t.forEach(((t,n)=>{t.forEach(((t,r)=>{T(t,n,r,e)}))}))},T=(t,e,n,r)=>{const o=64;let i=new Image;i.src=C,i.onload=function(){r.drawImage(i,t*o,0,o,o,e*o,n*o,o,o)}},S=(t,e)=>{const n=Math.floor(e.x/64),r=Math.floor(e.y/64);let o=E[n][r];o++,20==o&&(o=0),((t,e,n)=>{E[t][e]=n,console.log(E)})(n,r,o)},$=1e3/30;let j=window.performance.now();const L=(t,e,n)=>{const r=g("canvas");v(r,["game-canvas",`layer-${n}`]),b(r,["width","height"],[`${t}px`,`${e}px`]),w(r,"\n        position:absolute;\n    ");const o=r.getContext("2d");return(t=>{y(t,"click",(e=>{t.getContext("2d");const n=function(t,e){const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}(t,e);t.classList.contains("layer-1")&&S(0,n)}))})(r),0===n&&((t,e,n)=>{E=new Array(10).fill(0).map((()=>new Array(10).fill(10))),E[2][1]=11,E[9][9]=18,E[9][8]=18,E[8][8]=19,E[8][9]=19,console.log(E),I(t)})(o),1===n&&(t=>{(()=>{const t=new F("coin_1",x,12,!0,64,50,50);A.push(t)})(),A.forEach((e=>{e.draw(t),e.nextFrame()}))})(o),r};const R=t=>{(".layer-1",document.querySelector(".layer-1")).style.left=`${t.target.value}px`},k=n.p+"2ef5ad381915dbcfb9b2.png";window.performance.now();let B=[];function N(t,e){this.name=t,this.size=64,this.img=e,this.currentFrame=0,this.orix,this.oriy,this.elex,this.eley,this.dragging=!1,this.ele,this.ctx,this.init=()=>{const e=this.size;t=this.name;const n=g("canvas");v(n,["mini-canvas",`${t}`]),b(n,["width","height"],[`${e}px`,`${e}px`]);const r=document.body.getBoundingClientRect();this.elex=r.left,this.eley=r.top,this.orix=r.left,this.oriy=r.top,console.log(this.elex,this.eley),w(n,"\n            position:absolute;\n        ");const o=n.getContext("2d"),i=this.img;return i.onload=function(){o.clearRect(0,0,e,e),o.drawImage(i,0,0,e,e,0,0,e,e)},this.initMouse(n),this.ele=n,this.ctx=o,n},this.initMouse=t=>{this.ctx,t.addEventListener("drag",(e=>{getMousePos(t,evt),drag=!0})),t.addEventListener("drop",(t=>{drag=!1}))}}(()=>{const t=640,e=(()=>{const t=g("div");return v(t,["wrapper"]),w(t,"\n        position:relative;\n    "),m(document.body,t),t})(),n=L(t,t,0),r=L(t,t,1);m(e,n),m(e,r),console.log("commencing"),function(t,e,n){const r=()=>{window.requestAnimationFrame(r);const e=window.performance.now(),n=e-j;n<$||(j=e-n%$,t.map(((t,e)=>{const n=t.getContext("2d");0===e&&I(n),1===e&&(t=>{A.forEach((e=>{e.draw(t),e.nextFrame()}))})(n)})))};r()}([n,r])})(),(()=>{const t=(()=>{const t=g("div");return v(t,["mini-wrapper"]),w(t,"\n        position:relative;\n        background-color: #FFFFFF;\n        top: 650px;\n        height: 80px;\n        width: 640px;\n    "),m(document.body,t),t})();m(t,((t,e)=>{const n=new Image;n.src=e;const r=new N("can",n);return B.push(r),r.init()})(0,k))})(),m(document.body,(()=>{const t=g("div");v(t,["debug-wrapper"]),w(t,"\n        position:relative;\n        top:660px;\n    ");const e=g("input");return y(e,"input",R),b(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),m(t,e),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,