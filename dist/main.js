(()=>{"use strict";var t={320:(t,n,e)=>{e.d(n,{Z:()=>a});var r=e(537),o=e.n(r),i=e(645),s=e.n(i)()(o());s.push([t.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var p=[].concat(t[l]);r&&s[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),n.push(p))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],p=i[l]||0,u="".concat(l," ").concat(p);i[l]=p+1;var d=e(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)n[d].references++,n[d].updater(m);else{var f=o(m,r);r.byIndex=a,n.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=e(i[s]);n[a].references--}for(var c=r(t,o),l=0;l<i.length;l++){var p=e(i[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),o=e.n(r),i=e(569),s=e.n(i),a=e(565),c=e.n(a),l=e(216),p=e.n(l),u=e(589),d=e.n(u),m=e(320),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=p(),n()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const g=(t,n)=>{t.appendChild(n)},h=(t,n)=>{t.removeChild(n)},A=t=>document.createElement(t),b=(t,n)=>{n.forEach((n=>{t.classList.add(n)}))},v=(t,n)=>t.classList.contains(n),y=(t,n)=>{n.forEach((n=>{t.classList.remove(n)}))},x=t=>document.querySelector(t),C=(t,n,e)=>{t.addEventListener(n,e)},w=(t,n,e)=>{t.removeEventListener(n,e)},B=(t,n)=>{t.style.cssText=n},I=(t,n,e)=>{n.map(((n,r)=>{t.setAttribute(n,e[r])}))},E=e.p+"89cc97a32f3bdd1a1f7c.png";let k;const M=[11,14,15,16,19],$=(t,n,e)=>{R(k,t)},R=(t,n)=>{t.forEach(((t,e)=>{t.forEach(((t,r)=>{T(t,e,r,n)}))}))},T=(t,n,e,r)=>{const o=64;let i=new Image;i.src=E,i.onload=function(){r.drawImage(i,t*o,0,o,o,n*o,e*o,o,o)}},z=(t,n)=>{const e=Math.floor(n.x/64),r=Math.floor(n.y/64);let o=k[e][r];o++,20==o&&(o=0),((t,n,e)=>{k[t][n]=e})(e,r,o)},S=1e3/30;let j=window.performance.now();const _=(t,n,e)=>{const r=A("canvas");b(r,["game-canvas",`layer-${e}`]),I(r,["width","height"],[`${t}px`,`${n}px`]),B(r,"\n        position:absolute;\n    ");const o=r.getContext("2d");return(t=>{C(t,"click",(n=>{t.getContext("2d");const e=function(t,n){const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}}(t,n);v(t,"layer-1")&&z(0,e)}))})(r),0===e&&((t,n,e)=>{k=new Array(10).fill(0).map((()=>new Array(10).fill(10))),k[2][1]=11,k[9][9]=18,k[9][8]=18,k[8][8]=19,k[8][9]=19,console.log(k),$(t)})(o),r},L=t=>{"slider1"===t.target.id?x(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(x(".button-overlay").style.left=`${t.target.value}px`)},F=e.p+"2ef5ad381915dbcfb9b2.png",P=e.p+"d6da9f23976e4998ab40.png",O=e.p+"eed3668d18647392456b.png";let N=[];function D(t,n,e){this.name=t,this.size=64,this.img=n,this.imgsrc=e,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*N.length;const n=this.size,e=this.name,r=A("canvas");b(r,["mini-canvas",`${e}`]),I(r,["width","height"],[`${n}px`,`${n}px`]),B(r,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const o=r.getContext("2d"),i=this.img;i.onload=function(){o.clearRect(0,0,n,n),o.drawImage(i,0,0,n,n,0,0,n,n)},this.canvele=r,this.ctx=o;const s=A("div");return b(s,["canvas-icon"]),B(s,`\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0, url(${O});\n        `),this.imgele=s,this.initMouse(r,s),s},this.initMouse=(t,e)=>{const r=t.getContext("2d");let o;const i=x(".layer-1");let s,a=[],c=this.size,l=this.currentFrame;const p=t=>{0===a.length&&a.push(setInterval((()=>{l+=1,"can"===this.name&&(z(0,s),14===l&&(l=10)),"coin"===this.name&&12===l&&(l=0);const t=this.img;r.clearRect(0,0,c,c),r.drawImage(t,l*c,0,c,c,0,0,c,c),this.currentFrame=l}),250))},u=n=>{n.preventDefault();const e=document.body.getBoundingClientRect(),r=i.getBoundingClientRect();s={x:n.clientX-r.left,y:n.clientY-r.top},o={x:n.clientX-e.left,y:n.clientY-e.top},t.style.top=o.y-32+"px",t.style.left=o.x-32+"px"};C(e,"mousedown",(e=>{let o=this.currentFrame;e.preventDefault(),t.style.top="-1000px",t.style.left="-1000px",g(document.body,t),C(document.body,"mousemove",u),C(i,"mouseenter",p),r.clearRect(0,0,c,c),r.drawImage(n,o*c,0,c,c,0,0,c,c)})),C(document.body,"mouseup",(n=>{w(document.body,"mousemove",u),w(i,"mouseenter",p),clearInterval(a[0]),a=[],null!=x(`.mini-canvas.${this.name}`)&&h(document.body,t),r.clearRect(0,0,c,c)}))}}const X=(t,n)=>{const e=new Image;e.src=n;const r=new D(t,e,n),o=r.init(N.length);return N.push(r),o},Y=e.p+"82e9ac88b221b8bd6b76.png",Z=e.p+"9478dc13a48c1e0eaf79.png",q=t=>{if("promptbut1"===t.target.id||"closeprompt1"===t.target.id){const t=x(".prompt");null!=t?(b(t,["end-state"]),setTimeout((()=>h(document.body,t)),200)):U("you have been prompted")}},U=t=>{x(".button-overlay");const n=A("div");b(n,["prompt","start-state"]),I(n,["id","draggable"],["prompt1","false"]),B(n,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            border-radius: 5px;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const e=H();g(n,e),g(n,Q(t)),g(document.body,n),setTimeout((()=>n.classList.remove("start-state")),100)},H=()=>{const t=A("div");b(t,["bar"]),I(t,["id","draggable"],["bar1","false"]),B(t,"\n        display:flex;\n        justify-content: flex-end;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n    ");const n=A("div");return b(n,["button","closeprompt"]),n.id="closeprompt1",B(n,`\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${Z});\n    `),g(t,n),C(t,"mousedown",J),C(t,"mouseup",G),C(n,"click",q),t},J=t=>{t.preventDefault(),C(document.body,"mousemove",K),b(x("#prompt1"),["notransition"])},K=t=>{t.preventDefault();const n=x("#prompt1"),e=document.body.getBoundingClientRect(),r=t.clientX-e.left,o=t.clientY-e.top;n.style.top=o-10+"px",n.style.left=r-100+"px"},G=t=>{w(document.body,"mousemove",K),y(x("#prompt1"),["notransition"])},Q=t=>{const n=A("div");return B(n,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n        "),((t,n)=>{t.textContent=n})(n,t),n},V=e.p+"e112e84ea9b89a736591.png";let W=[];const tt=(t,n,e,r,o,i,s,a,c)=>{const l=A("canvas");b(l,["spritecanvas"]),I(l,["id","width","height"],[n,`${e}px`,`${e}px`]);const p=new Image;p.src=r,B(l,`\n        position:absolute;\n        pointer-events:none;\n        top: ${i}px;\n        left: ${o}px;\n    `);let u={name:n,size:e,ele:l,x:o,y:i,direction:"left",img:p,speed:s,direction_data:{none:0},draw_index:0,frame:0,show:a,frames:c,updates_per_frames:2,timer:1};if("car"===n&&(u.direction_data={left:0,downleft:1,down:2,upright:3,downright:4,upleft:5,up:6,right:7}),W.push(u),a){const n=l.getContext("2d");p.onload=function(){n.clearRect(0,0,e,e),n.drawImage(p,0,0,e,e,0,0,e,e)},g(t,l)}return l},nt=(t,n)=>{const e=x(".wrapper");W[t].show=n,n?(null===x(`#${W[t].name}`)&&g(e,W[t].ele),1===t&&et(1,1,"none")):null!==x(`#${W[t].name}`)&&h(e,W[t].ele)},et=(t,n,e)=>{let r=n;if("increment"===n&&(W[t].timer===W[t].updates_per_frames?(r=W[t].frame+1,W[t].frame=r,W[t].timer=1):W[t].timer+=1),r===W[t].frames&&(r="highlight"===W[t].name?1:0,W[t].frame=r),1===W[t].timer){W[t].direction=e;const n=W[t].direction_data[e];W[t].draw_index=n;const o=W[t].ele.getContext("2d"),i=W[t].size,s=W[t].img;o.clearRect(0,0,i,i),o.drawImage(s,i*r,i*n,i,i,0,0,i,i)}},rt=(t,n,e)=>{B(W[t].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${n}px;\n    `)},ot=e.p+"57131d6cff9375848552.png";let it,st=!1,at=[],ct=-1;const lt=(t,n,e,r,o)=>{const i=A("div");return b(i,["button",t]),i.id=t,B(i,`\n            position: absolute;\n            left:${r}px;\n            top: ${o}px;\n            width: 32px;\n            height: 32px;\n            background: url(${Y}) -${32*n}px 0;\n        `),C(i,"click",e),i},pt=t=>{const n=x("#promptbut1");v(n,"vibrate")&&y(n,["vibrate"]),setTimeout((()=>b(n,["vibrate"])),100)},ut=t=>{ct+=1,2===ct&&(ct=-1);const n=x(".layer-1").getContext("2d");if(-1!==ct){const t=new Image;t.src=ot,t.onload=function(){n.drawImage(t,320*ct,0,320,320,0,0,640,640)}}else n.clearRect(0,0,640,640)},dt=t=>{const n=x("#pointer"),e=x(".layer-0").getBoundingClientRect();let r={x:0,y:0};const o=t=>{r={x:t.clientX-e.left,y:t.clientY-e.top}};o(t),st?(st=!1,y(n,["selected"]),clearInterval(at[0]),at=[],w(document,"mousemove",o),nt(1,!1)):(st=!0,b(n,["selected"]),C(document.body,"mousemove",o),at.push(setInterval((()=>{((t,n,e)=>{const r=W[t],o=n-r.x,i=e-r.y,s=Math.sqrt(o*o+i*i),a=o/s*r.speed,c=i/s*r.speed,l=r.x+a,p=r.y+c,u=W[t].size,d=((t,n)=>{const e=Math.floor(t/64),r=Math.floor(n/64);return k[e][r]})(l,p);if(s>r.speed&&!M.includes(d)){W[t].x=l,W[t].y=p,rt(t,l-u/2,p-u/2);let n=Math.atan(-c/a);a<0&&(-c<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let e="left";n>=22.5&&n<=67.5?e="upright":n>=67.5&&n<=112.5?e="up":n>=112.5&&n<=157.5?e="upleft":n<=22.5&&n>=-22.5?e="right":n<=-22.5&&n>=-67.5?e="downright":n<=-67.5&&n>=-112.5?e="down":n<=-112.5&&n>=-157.5?e="downleft":n>=157.5&&n<=-157.5&&(e="left"),et(0,"increment",e)}})(0,r.x,r.y),et(1,"increment","none"),rt(1,64*Math.floor(r.x/64),64*Math.floor(r.y/64))}),50)),nt(1,!0))};var mt;(()=>{B(document.body,"\n        background-color: #242424;\n    ");const t=(()=>{const t=A("div");return b(t,["wrapper"]),B(t,"\n        position:relative;\n    "),g(document.body,t),t})(),n=_(640,640,0),e=_(640,640,1);var r;g(t,n),g(t,e),tt(r=t,"car",64,V,300,200,5,!0,3),tt(r,"highlight",64,O,0,0,0,!1,8),console.log("commencing"),function(t,n,e){const r=()=>{window.requestAnimationFrame(r);const n=window.performance.now(),e=n-j;e<S||(j=n-e%S,t.map(((t,n)=>{const e=t.getContext("2d");0===n&&$(e)})))};r()}([n,e]);const o=(it=A("div"),b(it,["button-overlay"]),B(it,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(t=>{g(t,lt("promptbut1",2,q,16,16)),g(t,lt("shaker",3,pt,16,80)),g(t,lt("pointer",7,dt,16,144)),g(t,lt("changebg",8,ut,16,208))})(it),it);g(t,o)})(),mt=(()=>{const t=A("div");return b(t,["mini-wrapper"]),B(t,"\n        position:relative;\n        background-color: #000000;\n        top: 650px;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n    "),g(document.body,t),t})(),g(mt,X("can",F)),g(mt,X("coin",P)),g(document.body,(()=>{const t=A("div");b(t,["debug-wrapper"]),B(t,"\n        position:relative;\n        top:660px;\n    ");const n=A("input");n.id="slider1",C(n,"input",L),I(n,["type","min","max","value","class"],["range","0","640","0","slidey"]),g(t,n);const e=A("input");return e.id="slider2",C(e,"input",L),I(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),g(t,e),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,