(()=>{"use strict";var t={320:(t,n,e)=>{e.d(n,{Z:()=>s});var o=e(537),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([t.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(t,n,e)=>{e.d(n,{Z:()=>u});var o=e(537),r=e.n(o),i=e(645),a=e.n(i),s=e(667),c=e.n(s),l=new URL(e(542),e.b),p=a()(r()),d=c()(l);p.push([t.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${d}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=p},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var p=[].concat(t[l]);o&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),e&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=e):p[2]=e),r&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=r):p[4]="".concat(r)),n.push(p))}},n}},667:t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],l=o.base?c[0]+o.base:c[0],p=i[l]||0,d="".concat(l," ").concat(p);i[l]=p+1;var u=e(d),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var f=r(m,o);o.byIndex=s,n.splice(s,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var c=o(t,r),l=0;l<i.length;l++){var p=e(i[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=c}}},569:t=>{var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},542:(t,n,e)=>{t.exports=e.p+"f78662ff4aad4d038806.ttf"}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return t[o](i,i.exports,e),i.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!t;)t=o[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const t=(t,n)=>{t.appendChild(n)},n=(t,n)=>{t.removeChild(n)},o=t=>document.createElement(t),r=(t,n)=>{n.forEach((n=>{t.classList.add(n)}))},i=(t,n)=>t.classList.contains(n),a=(t,n)=>{n.forEach((n=>{t.classList.remove(n)}))},s=t=>document.querySelector(t),c=(t,n)=>{t.textContent=n},l=(t,n,e)=>{t.addEventListener(n,e)},p=(t,n,e)=>{t.removeEventListener(n,e)},d=(t,n)=>{t.style.cssText=n},u=(t,n,e)=>{n.map(((n,o)=>{t.setAttribute(n,e[o])}))};var m=e(379),f=e.n(m),g=e(795),h=e.n(g),A=e(569),b=e.n(A),v=e(565),x=e.n(v),y=e(216),w=e.n(y),C=e(589),B=e.n(C),I=e(320),k={};k.styleTagTransform=B(),k.setAttributes=x(),k.insert=b().bind(null,"head"),k.domAPI=h(),k.insertStyleElement=w(),f()(I.Z,k),I.Z&&I.Z.locals&&I.Z.locals;var $=e(414),E={};E.styleTagTransform=B(),E.setAttributes=x(),E.insert=b().bind(null,"head"),E.domAPI=h(),E.insertStyleElement=w(),f()($.Z,E),$.Z&&$.Z.locals&&$.Z.locals;const M=e.p+"2303bf42784ad28af8cb.gif";let R=-1;const T=(t="bruh")=>{R+=1,c("bruh"===t?s("#score"):t,`Score: ${R}`)},S=t=>{"slider1"===t.target.id?s(".layer-1").style.left=`${t.target.value}px`:"slider2"===t.target.id&&(s(".button-overlay").style.left=`${t.target.value}px`)},z=e.p+"9478dc13a48c1e0eaf79.png",_=e.p+"46f9a3232743a28fe55c.mp3",j=e.p+"f6a9d30b202864f403ab.mp3",L=e.p+"4b0a7fa0436041018c59.mp3",Z=e.p+"2313cadcd41e0912116a.mp3",O=e.p+"db5db37355927833123f.mp3",P=e.p+"9a548da064d95ad7ec01.mp3";let F=[];const N=(t,n)=>{var e=new Audio(t);F.push({audio:e,name:n})},D=t=>{F.find((n=>n.name===t)).audio.play()};let U=0;const q=t=>{let e=0,o="";"string"==typeof t||t instanceof String?("win"===t&&(e=2,o="you won!"),"tutorial"===t&&(e=3,o="welcome! how to play: find out!")):(i(t.target,"closeprompt")&&D("close"),"promptbut-1"===t.target.id||"closeprompt-1"===t.target.id?(e=1,o="you have been prompted"):"closeprompt-2"===t.target.id?e=2:"closeprompt-3"===t.target.id&&(e=3));const a=s(`#prompt-${e}`);null!=a?(r(a,["end-state"]),setTimeout((()=>n(s(".wrapper"),a)),200)):X(o,e)},X=(n,e)=>{s(".button-overlay");const i=o("div");r(i,["prompt","start-state"]),u(i,["id","draggable"],[`prompt-${e}`,"false"]),d(i,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const a=H(e);t(i,a),t(i,Y(n)),t(s(".wrapper"),i),setTimeout((()=>i.classList.remove("start-state")),100)},Y=t=>{const n=o("div");return d(n,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n            font-family: 'munro';\n        "),c(n,t),n},H=n=>{const e=o("div");r(e,["bar"]),u(e,["id","draggable"],[`bar-${n}`,"false"]),d(e,"\n        display:flex;\n        justify-content: flex-end;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n    ");const i=o("div");return r(i,["button","closeprompt"]),i.id=`closeprompt-${n}`,d(i,`\n        position: absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${z});\n    `),t(e,i),l(e,"mousedown",J),l(e,"mouseup",G),l(i,"click",q),e},J=t=>{const n=t.target.id.split("-")[1];U=n,t.preventDefault(),l(document.body,"mousemove",K),r(s(`#prompt-${n}`),["notransition"])},K=t=>{t.preventDefault();const n=s(`#prompt-${U}`),e=s(".wrapper").getBoundingClientRect(),o=t.clientX-e.left,r=t.clientY-e.top;null!==n&&(n.style.top=r-10+"px",n.style.left=o-100+"px")},G=t=>{p(document.body,"mousemove",K),a(s(`#prompt-${U}`),["notransition"]),U=0},Q=e.p+"e112e84ea9b89a736591.png",V=e.p+"89cc97a32f3bdd1a1f7c.png";let W;const tt=[11,14,15,16,19],nt=(t,n,e)=>{et(W,t)},et=(t,n)=>{t.forEach(((t,e)=>{t.forEach(((t,o)=>{ot(t,e,o,n)}))}))},ot=(t,n,e,o)=>{const r=64;let i=new Image;i.src=V,i.onload=function(){o.drawImage(i,t*r,0,r,r,n*r,e*r,r,r)}},rt=e.p+"eed3668d18647392456b.png",it=e.p+"d6da9f23976e4998ab40.png";let at=[],st=[];const ct=(n,e,i,a,s,c,l,p,m)=>{const f=o("canvas");r(f,["spritecanvas"]),u(f,["id","width","height"],[e,`${i}px`,`${i}px`]);const g=new Image;g.src=a,d(f,`\n        position:absolute;\n        pointer-events:none;\n        top: ${c}px;\n        left: ${s}px;\n    `);let h={name:e,size:i,ele:f,x:s,y:c,direction:"left",img:g,speed:l,direction_data:{none:0},draw_index:0,frame:0,show:p,frames:m,updates_per_frames:2,timer:1};if("car"===e&&(h.direction_data={left:0,downleft:1,down:2,upright:3,downright:4,upleft:5,up:6,right:7}),at.push(h),"coin"===e&&st.push(h),p){const e=f.getContext("2d");g.onload=function(){e.clearRect(0,0,i,i),e.drawImage(g,0,0,i,i,0,0,i,i)},t(n,f)}return f},lt=(e,o)=>{const r=s(".wrapper");at[e].show=o,o?(null===s(`#${at[e].name}`)&&t(r,at[e].ele),1===e&&pt(1,1,"none")):null!==s(`#${at[e].name}`)&&n(r,at[e].ele)},pt=(t,n,e)=>{let o=n;if("increment"===n&&(at[t].timer===at[t].updates_per_frames?(o=at[t].frame+1,at[t].frame=o,at[t].timer=1):at[t].timer+=1),o===at[t].frames&&(o="highlight"===at[t].name?1:0,at[t].frame=o),1===at[t].timer){at[t].direction=e;const n=at[t].direction_data[e];at[t].draw_index=n;const r=at[t].ele.getContext("2d"),i=at[t].size,a=at[t].img;r.clearRect(0,0,i,i),r.drawImage(a,i*o,i*n,i,i,0,0,i,i)}},dt=(t,n,e)=>{d(at[t].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${n}px;\n    `)},ut=t=>{const e=at.indexOf(t);if(e>-1){if("coin"===at[e].name){const n=st.indexOf(t);n>-1&&st.splice(n,1)}n(s(".wrapper"),at[e].ele),at.splice(e,1)}},mt=e.p+"0cb172c3af037a285502.png";let ft=0,gt=[];const ht=t=>{D("swipe"),Number.isInteger(t)&&(ft=t),console.log(ft);const n=vt(gt[ft]);ft+=1,l(n,"click",At)},At=t=>{D("swipe");let e=t.target;i(e,"dialogue")||(e=t.target.parentNode),p(e,"click",At),r(e,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),e),gt[ft-1].follow&&ht()}),200)},bt=(t,n,e,o)=>{gt.push({text:t,code:n,charactersrc:e,follow:o})},vt=n=>{const e=o("div");return r(e,["dialogue","dialogue-start-end"]),u(e,["id","draggable"],[`dialogue-${n.code}`,"false"]),d(e,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 400px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 400px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n        "),t(e,xt(n.charactersrc)),t(e,yt(n.text)),t(s(".game"),e),setTimeout((()=>e.classList.remove("dialogue-start-end")),100),e},xt=t=>{const n=o("div");return r(n,["charBox"]),d(n,`\n        border: 5px solid darkslategray;\n        width: 64px;\n        height: 64px;\n        background: url(${t}) 0 0;\n    `),n},yt=t=>{const n=o("div");return d(n,"\n            color:white;\n            font-family: 'munro';\n            font-size: 25px;\n        "),c(n,t),n},wt=t=>{switch(t){case"start":q("tutorial"),ht(0);break;case"win":q("win"),d(document.body,"\n                background-image: none;\n                background-color: #476336;\n            ")}},Ct=(t,n)=>{const e=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=W[e][o];r++,20==r&&(r=0),((t,n,e)=>{W[t][n]=e})(e,o,r)},Bt=1e3/30;let It=window.performance.now();const kt=(t,n,e)=>{const a=o("canvas");r(a,["game-canvas",`layer-${e}`]),u(a,["width","height"],[`${t}px`,`${n}px`]),d(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(t=>{l(t,"click",(n=>{t.getContext("2d");const e=function(t,n){const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}}(t,n);i(t,"layer-1")&&Ct(0,e)}))})(a),0===e&&((t,n,e)=>{W=new Array(10).fill(0).map((()=>new Array(10).fill(10))),W[2][1]=11,W[9][9]=18,W[9][8]=18,W[8][8]=19,W[8][9]=19,console.log(W),nt(t)})(s),a};const $t=e.p+"2ef5ad381915dbcfb9b2.png";let Et=[];function Mt(e,i,a){this.name=e,this.size=64,this.img=i,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.init=t=>{this.addedleft=64*Et.length;const n=this.size,e=this.name,i=o("canvas");r(i,["mini-canvas",`${e}`]),u(i,["width","height"],[`${n}px`,`${n}px`]),d(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=i.getContext("2d"),s=this.img;s.onload=function(){a.clearRect(0,0,n,n),a.drawImage(s,0,0,n,n,0,0,n,n)},this.canvele=i,this.ctx=a;const c=o("div");return r(c,["canvas-icon"]),c.id=e,d(c,`\n            width: 64px;\n            height: 64px;\n            background: url(${this.imgsrc}) -64px 0, url(${rt});\n        `),this.imgele=c,this.initMouse(i,c),c},this.initMouse=(o,r)=>{const a=o.getContext("2d");let d;const u=s(".layer-1");let m,f=[],g=this.size,h=this.currentFrame;const A=t=>{0===f.length&&f.push(setInterval((()=>{h+=1,"can"===this.name&&(Ct(0,m),14===h&&(h=10)),"coin"===this.name&&12===h&&(h=0);const t=this.img;a.clearRect(0,0,g,g),a.drawImage(t,h*g,0,g,g,0,0,g,g),this.currentFrame=h}),250))},b=t=>{t.preventDefault();const n=document.body.getBoundingClientRect(),e=u.getBoundingClientRect();m={x:t.clientX-e.left,y:t.clientY-e.top},d={x:t.clientX-n.left,y:t.clientY-n.top},o.style.top=d.y-32+"px",o.style.left=d.x-32+"px"};l(r,"mousedown",(n=>{let e=this.currentFrame;n.preventDefault(),o.style.top="-1000px",o.style.left="-1000px",t(document.body,o),l(document.body,"mousemove",b),l(u,"mouseenter",A),a.clearRect(0,0,g,g),a.drawImage(i,e*g,0,g,g,0,0,g,g)})),l(document.body,"mouseup",(t=>{p(document.body,"mousemove",b),p(u,"mouseenter",A),0!==f.length&&"coin"===e&&ct(s(".wrapper"),"coin",64,it,m.x-32,m.y-32,0,!0,12),clearInterval(f[0]),f=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,o),a.clearRect(0,0,g,g)})),l(r,"mouseenter",(t=>{(t=>{const n=s(".infoScreen");"can"===t?c(n,"the can is for water"):"coin"===t&&c(n,"the coin is for car somehow")})(t.target.id)}))}}const Rt=(t,n)=>{const e=new Image;e.src=n;const o=new Mt(t,e,n),r=o.init(Et.length);return Et.push(o),r},Tt=e.p+"82e9ac88b221b8bd6b76.png",St=n=>{const e=o("div");let i;r(e,["shader"]),e.id=n,"light-shader"===n?i="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(i="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),d(e,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        ${i}\n    `),t(s(".shadwrap"),e)},zt=n=>{const e=o("div");r(e,["level","shader"]),e.id=n,d(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),"level-1"===n?t(e,jt(0,256,640,64)):"level-2"===n&&t(e,jt(0,128,640,64)),t(s(".shadwrap"),e)},_t=()=>{const t=(".shader",document.querySelectorAll(".shader"));const e=s(".shadwrap");t.forEach((t=>{n(e,t)}))},jt=(t,n,e,i)=>{const a=o("div");return r(a,["pathblock"]),d(a,`\n        background-color: rgba(245, 66, 66, 0.5);\n        left: ${t}px;\n        top: ${n}px;\n        height: ${i}px;\n        width: ${e}px;\n        position:absolute;\n    `),a};let Lt,Zt=!1,Ot=[],Pt=-1;const Ft=(t,n,e,i,a)=>{const s=o("div");return r(s,["button",t]),s.id=t,d(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${Tt}) -${32*n}px 0;\n        `),l(s,"click",e),s},Nt=t=>{const n=s("#promptbut-1");let e;for(i(n,"vibrate")&&a(n,["vibrate"]),setTimeout((()=>r(n,["vibrate"])),100),e=st.length-1;e>=0;e-=1)ut(st[e])},Dt=t=>{Pt+=1,2===Pt&&(Pt=-1,_t()),0===Pt?(St("light-shader"),zt("level-1")):1===Pt&&(_t(),zt("level-2"),St("dark-shader"))},Ut=t=>{const n=s("#pointer"),e=s(".layer-0").getBoundingClientRect();let o={x:0,y:0};const i=t=>{o={x:t.clientX-e.left,y:t.clientY-e.top}};i(t),Zt?(Zt=!1,a(n,["selected"]),clearInterval(Ot[0]),Ot=[],p(document,"mousemove",i),lt(1,!1)):(Zt=!0,r(n,["selected"]),l(document.body,"mousemove",i),Ot.push(setInterval((()=>{((t,n,e)=>{const o=at[t],r=n-o.x,i=e-o.y,a=Math.sqrt(r*r+i*i),s=r/a*o.speed,c=i/a*o.speed,l=o.x+s,p=o.y+c,d=at[t].size,u=((t,n)=>{const e=Math.floor(t/64),o=Math.floor(n/64);return W[e][o]})(l,p);if(a>o.speed&&!tt.includes(u)){at[t].x=l,at[t].y=p,dt(t,l-d/2,p-d/2);let n=Math.atan(-c/s);s<0&&(-c<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let e="left";n>=22.5&&n<=67.5?e="upright":n>=67.5&&n<=112.5?e="up":n>=112.5&&n<=157.5?e="upleft":n<=22.5&&n>=-22.5?e="right":n<=-22.5&&n>=-67.5?e="downright":n<=-67.5&&n>=-112.5?e="down":n<=-112.5&&n>=-157.5?e="downleft":n>=157.5&&n<=-157.5&&(e="left"),pt(0,"increment",e)}})(0,o.x,o.y),pt(1,"increment","none"),dt(1,64*Math.floor(o.x/64),64*Math.floor(o.y/64))}),50)),lt(1,!0))},qt=o("div");r(qt,["game"]),t(document.body,qt),d(qt,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n"),t(qt,(()=>{d(document.body,`\n        background-color: #242424;\n        background-image: url("${M}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),d(n,"\n        position:relative;\n        left: -320px;\n    "),t(document.body,n),n})(),e=kt(640,640,0),i=kt(640,640,1);var a;t(n,e),t(n,i),ct(a=n,"car",64,Q,300,200,5,!0,3),ct(a,"highlight",64,rt,0,0,0,!1,8),ct(a,"coin",64,it,400,500,0,!0,12),(n=>{const e=o("div");r(e,["shadwrap"]),d(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),t(n,e)})(n),console.log("commencing"),function(t,n,e){const o=()=>{window.requestAnimationFrame(o);const n=window.performance.now(),e=n-It;e<Bt||(It=n-e%Bt,t.map(((t,n)=>{const e=t.getContext("2d");0===n&&nt(e)})),st.forEach((t=>{((t,n,e)=>{let o=n;if("increment"===n&&(t.timer===t.updates_per_frames?(o=t.frame+1,t.frame=o,t.timer=1):t.timer+=1),o===t.frames&&(o="highlight"===t.name?1:0,t.frame=o),1===t.timer){t.direction=e;const n=t.direction_data[e];t.draw_index=n;const r=t.ele.getContext("2d"),i=t.size,a=t.img;r.clearRect(0,0,i,i),r.drawImage(a,i*o,i*n,i,i,0,0,i,i)}})(t,"increment","none"),((t,n)=>{const e=t.ele.getBoundingClientRect(),o=n.getBoundingClientRect();return!(e.right<o.left||e.left>o.right||e.bottom<o.top||e.top>o.bottom)})(t,s("#car"))&&(ut(t),T(),D("coin"),10===R&&wt("win"))})))};o()}([e,i]);const c=(Lt=o("div"),r(Lt,["button-overlay"]),d(Lt,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{t(n,Ft("promptbut-1",2,q,16,16)),t(n,Ft("shaker",3,Nt,16,80)),t(n,Ft("pointer",7,Ut,16,144)),t(n,Ft("changebg",8,Dt,16,208))})(Lt),Lt);return t(n,c),n})()),t(qt,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),d(n,"\n        position:relative;\n        background-color: #000000;\n        top: 650px;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n    "),t(document.body,n),n})();return t(e=n,Rt("can",$t)),t(e,Rt("coin",it)),bt("man",0,mt,!0),bt("life can be tough",1,mt,!1),bt("you aint half bad bro",2,mt,!1),(()=>{const n=o("div");r(n,["infoScreen"]),d(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid #32b7d1;\n        position: absolute;\n        left: 650px;\n        color:white;\n        font-family:munro;\n    "),t(s(".wrapper"),n)})(),N(j,"click"),N(_,"close"),N(L,"coin"),N(Z,"epic"),N(O,"swipe"),N(P,"open"),n;var e})()),t(qt,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),d(n,"\n        position:relative;\n        top:660px;\n    ");const e=o("input");e.id="slider1",l(e,"input",S),u(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,e);const i=o("input");i.id="slider2",l(i,"input",S),u(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),t(n,i);const a=o("h1");return a.id="score",d(a,"\n        color:white;\n        font-family: munro;\n    "),T(a),t(n,a),n})();return t(document.body,n),n})()),wt("start")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQ2hCQSxFQUFVLEVBQU8sU0FDakJBLEVBQVUsRUFBTSxRY3NCVCtMLEVMZ0hPLElBQUNDLENLaEhFLEVENUJSRSxJQUNidk8sRUFBTzhNLEdDOEJXLE1BQ2QsTUFBTTBCLEVmbENTLE1BQ2YsTUFBTUMsRUFBWXRPLEVBQU8sT0FDekJDLEVBQVNxTyxFQUFXLENBQUMsa0JBQ3JCNVMsRUFBTTRTLEVBQVUsMERBS2hCLE1BQU1DLEVBQVN2TyxFQUFPLFNBQ3RCdU8sRUFBT3pYLEdBQUssVUFDWmlLLEVBQU93TixFQUFRLFFBQVN6TSxHQUN4QlIsRUFBUWlOLEVBQU8sQ0FBQyxPQUFRLE1BQU8sTUFBTyxRQUFTLFNBQVUsQ0FBQyxRQUFTLElBQUssTUFBTSxJQUFJLFdBQ2xGMU8sRUFBT3lPLEVBQVdDLEdBR2xCLE1BQU1DLEVBQVV4TyxFQUFPLFNBQ3ZCd08sRUFBUTFYLEdBQUssVUFDYmlLLEVBQU95TixFQUFTLFFBQVMxTSxHQUN6QlIsRUFBUWtOLEVBQVEsQ0FBQyxPQUFRLE1BQU8sTUFBTyxRQUFTLFNBQVUsQ0FBQyxRQUFTLElBQUssTUFBTSxJQUFJLFdBQ25GM08sRUFBT3lPLEVBQVdFLEdBRWxCLE1BQU0zTSxFQUFXN0IsRUFBTyxNQVN4QixPQVJBNkIsRUFBUy9LLEdBQUssUUFDZDRFLEVBQU1tRyxFQUFVLDZEQUloQkQsRUFBZUMsR0FDZmhDLEVBQU95TyxFQUFXek0sR0FFWHlNLENBQVMsRWVJRUcsR0FFbEIsT0FEQTVPLEVBQU9oRSxTQUFTNEgsS0FBTTRLLEdBQ2ZBLENBQVMsRURqQ1BLLElBRWI1RyxHQUFRLFEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2Nzcy9hbmltYXRpb25zLmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2Nzcy9mb250cy5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvc2NyaXB0cy9Rb0wuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jc3MvYW5pbWF0aW9ucy5jc3M/MzVlNSIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2Nzcy9mb250cy5jc3M/ZTNlMCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvZGVidWdUb29scy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvc291bmRzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvY29tcG9uZW50cy9wcm9tcHRzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvc2NyaXB0cy9jYW52YXNGdW5jcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvc3ByaXRlY2FudmFzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvY29tcG9uZW50cy9kaWFsb2d1ZS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvdHJpZ2dlcnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9zY3JpcHRzL2NhbnZNb3VzZUZ1bmNzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvY29tcG9uZW50cy9jYW52YXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jb21wb25lbnRzL3dyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jb21wb25lbnRzL21pbmlDYW52YXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jb21wb25lbnRzL2luZm9TY3JlZW4uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jb21wb25lbnRzL3NoYWRlcnMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jb21wb25lbnRzL2J1dHRvbk92ZXJsYXkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvc3RhcnQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9zY3JpcHRzL1NDRnVuY3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zdGFydC1zdGF0ZXtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMjAwMHB4KTtcbn1cblxuLmVuZC1zdGF0ZXtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xufVxuXG4uZGlhbG9ndWUtc3RhcnQtZW5ke1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDEwMDBweCk7XG59XG5cbi52aWJyYXRlIHtcbiAgICBhbmltYXRpb246IHRpbHQtc2hha2luZyAwLjI1cyA1O1xufSAgXG5cbkBrZXlmcmFtZXMgdGlsdC1zaGFraW5nIHtcbiAgICAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XG4gICAgMjUlIHsgdHJhbnNmb3JtOiByb3RhdGUoNWRlZyk7IH1cbiAgICA1MCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZWcpOyB9XG4gICAgNzUlIHsgdHJhbnNmb3JtOiByb3RhdGUoLTVkZWcpOyB9XG4gICAgMTAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XG59XG5cbi5idXR0b24gLmNhbnZhcy1pY29ue1xuICAgIC13ZWJraXQtZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xuXHQtbW96LWZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcblx0LW8tZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xuXHQtbXMtZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xuXHRmaWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XG59XG5cbi5idXR0b246aG92ZXIsIC5jYW52YXMtaWNvbjpob3ZlciwgLnNlbGVjdGVke1xuICAgIC13ZWJraXQtZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XG5cdC1tb3otZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XG5cdC1vLWZpbHRlcjogYnJpZ2h0bmVzcyg4MCUpO1xuXHQtbXMtZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XG5cdGZpbHRlcjogYnJpZ2h0bmVzcyg4MCUpO1xufVxuXG4uYnV0dG9uOmFjdGl2ZSwgLmNhbnZhcy1pY29uOmFjdGl2ZXtcbiAgICAtd2Via2l0LWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xuXHQtbW96LWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xuXHQtby1maWx0ZXI6IGJyaWdodG5lc3MoNjAlKTtcblx0LW1zLWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xuXHRmaWx0ZXI6IGJyaWdodG5lc3MoNjAlKTtcbn1cblxuLm5vdHJhbnNpdGlvbiB7XG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XG4gICAgLW1vei10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XG4gICAgLW8tdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xuICAgIC1tcy10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XG4gICAgdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9hbmltYXRpb25zLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGdDQUFnQztBQUNwQzs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLCtCQUErQjtBQUNuQzs7QUFFQTtJQUNJLEtBQUssdUJBQXVCLEVBQUU7SUFDOUIsTUFBTSx1QkFBdUIsRUFBRTtJQUMvQixNQUFNLHNCQUFzQixFQUFFO0lBQzlCLE1BQU0sd0JBQXdCLEVBQUU7SUFDaEMsT0FBTyx1QkFBdUIsRUFBRTtBQUNwQzs7QUFFQTtJQUNJLGdDQUFnQztDQUNuQyw2QkFBNkI7Q0FDN0IsMkJBQTJCO0NBQzNCLDRCQUE0QjtDQUM1Qix3QkFBd0I7QUFDekI7O0FBRUE7SUFDSSwrQkFBK0I7Q0FDbEMsNEJBQTRCO0NBQzVCLDBCQUEwQjtDQUMxQiwyQkFBMkI7Q0FDM0IsdUJBQXVCO0FBQ3hCOztBQUVBO0lBQ0ksK0JBQStCO0NBQ2xDLDRCQUE0QjtDQUM1QiwwQkFBMEI7Q0FDMUIsMkJBQTJCO0NBQzNCLHVCQUF1QjtBQUN4Qjs7QUFFQTtJQUNJLG1DQUFtQztJQUNuQyxnQ0FBZ0M7SUFDaEMsOEJBQThCO0lBQzlCLCtCQUErQjtJQUMvQiwyQkFBMkI7QUFDL0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN0YXJ0LXN0YXRle1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMjAwMHB4KTtcXG59XFxuXFxuLmVuZC1zdGF0ZXtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG59XFxuXFxuLmRpYWxvZ3VlLXN0YXJ0LWVuZHtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMTAwMHB4KTtcXG59XFxuXFxuLnZpYnJhdGUge1xcbiAgICBhbmltYXRpb246IHRpbHQtc2hha2luZyAwLjI1cyA1O1xcbn0gIFxcblxcbkBrZXlmcmFtZXMgdGlsdC1zaGFraW5nIHtcXG4gICAgMCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgICAyNSUgeyB0cmFuc2Zvcm06IHJvdGF0ZSg1ZGVnKTsgfVxcbiAgICA1MCUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgwZWcpOyB9XFxuICAgIDc1JSB7IHRyYW5zZm9ybTogcm90YXRlKC01ZGVnKTsgfVxcbiAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG59XFxuXFxuLmJ1dHRvbiAuY2FudmFzLWljb257XFxuICAgIC13ZWJraXQtZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xcblxcdC1tb3otZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xcblxcdC1vLWZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcXG5cXHQtbXMtZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xcblxcdGZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcXG59XFxuXFxuLmJ1dHRvbjpob3ZlciwgLmNhbnZhcy1pY29uOmhvdmVyLCAuc2VsZWN0ZWR7XFxuICAgIC13ZWJraXQtZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxuXFx0LW1vei1maWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcXG5cXHQtby1maWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcXG5cXHQtbXMtZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxuXFx0ZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxufVxcblxcbi5idXR0b246YWN0aXZlLCAuY2FudmFzLWljb246YWN0aXZle1xcbiAgICAtd2Via2l0LWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xcblxcdC1tb3otZmlsdGVyOiBicmlnaHRuZXNzKDYwJSk7XFxuXFx0LW8tZmlsdGVyOiBicmlnaHRuZXNzKDYwJSk7XFxuXFx0LW1zLWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xcblxcdGZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xcbn1cXG5cXG4ubm90cmFuc2l0aW9uIHtcXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIC1tb3otdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xcbiAgICAtby10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIC1tcy10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIHRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9mb250cy9tdW5yby50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwge1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG59XG5cbkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8nO1xuICAgIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbiAgfVxuXG4gIC8qXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8tbmFycm93JztcbiAgICBzcmM6IHVybCguLi9mb250cy9tdW5yby1uYXJyb3cudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XG4gIH1cbiAgXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8tc21hbGwnO1xuICAgIHNyYzogdXJsKC4uL2ZvbnRzL211bnJvLXNtYWxsLnR0ZikgZm9ybWF0KCd0cnVldHlwZScpO1xuICB9XG4gICovYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2ZvbnRzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQiwrREFBK0M7RUFDakQ7O0VBRUE7Ozs7Ozs7Ozs7R0FVQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sIHtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8nO1xcbiAgICBzcmM6IHVybCguLi9mb250cy9tdW5yby50dGYpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXG4gIH1cXG5cXG4gIC8qXFxuICBAZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdtdW5yby1uYXJyb3cnO1xcbiAgICBzcmM6IHVybCguLi9mb250cy9tdW5yby1uYXJyb3cudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxuICB9XFxuICBcXG4gIEBmb250LWZhY2Uge1xcbiAgICBmb250LWZhbWlseTogJ211bnJvLXNtYWxsJztcXG4gICAgc3JjOiB1cmwoLi4vZm9udHMvbXVucm8tc21hbGwudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxuICB9XFxuICAqL1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY29uc3QgcmVuZGVyID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5jb25zdCByZW1vdmUgPSAocGFyZW50LCBjaGlsZCkgPT57XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuY29uc3QgY3JlYXRlID0gKGVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50KTtcbn1cblxuY29uc3QgYWRkQ2xhc3MgPSAoZWxlbWVudCwgY2xhc3NsaXN0KSA9PntcbiAgICBjbGFzc2xpc3QuZm9yRWFjaChjbGFzID0+IHtlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhcyl9KTtcbn1cblxuY29uc3QgaGFzQ2xhc3MgPSAoZWxlbWVudCwgY2xhcykgPT4ge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzKTtcbn1cblxuY29uc3QgcmVtQ2xhc3MgPSAoZWxlbWVudCwgY2xhc3NsaXN0KSA9PntcbiAgICBjbGFzc2xpc3QuZm9yRWFjaChjbGFzID0+IHtlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhcyl9KTtcbn1cblxuY29uc3QgZmluZCA9IChzZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbn1cblxuY29uc3QgZmluZEFsbCA9IChzZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbn1cbmNvbnN0IHdyaXRlID0gKGVsZW1lbnQsIHRleHQpID0+IHtcbiAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuY29uc3QgZGV0ZWN0ID0gKGVsZW1lbnQsIGV2ZW50LCBmdW5jKSA9PntcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmMpO1xufVxuXG5jb25zdCB1bmRldGVjdCA9IChlbGVtZW50LCBldmVudCwgZnVuYykgPT57XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jKTtcbn1cblxuY29uc3Qgc3R5bGUgPSAoZWxlbWVudCwgc3R5bGV0ZXh0KSA9PiB7XG4gICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gc3R5bGV0ZXh0O1xufVxuXG5jb25zdCBhdHRyaWJzID0gKGVsZW1lbnQsIGF0dHJpYkxpc3QsIHZhbHVlcykgPT4ge1xuICAgIGF0dHJpYkxpc3QubWFwKChhdHRyaWIsaW5kZXgpID0+IHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmliLCB2YWx1ZXNbaW5kZXhdKTtcbiAgICB9KVxufVxuXG5leHBvcnQge3JlbmRlciwgcmVtb3ZlLCBjcmVhdGUsIGFkZENsYXNzLCBoYXNDbGFzcywgcmVtQ2xhc3MsIGZpbmQsIGZpbmRBbGwsIHdyaXRlLCBkZXRlY3QsIHVuZGV0ZWN0LCBzdHlsZSwgYXR0cmlic30iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYW5pbWF0aW9ucy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FuaW1hdGlvbnMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnRzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udHMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHtyZW5kZXIsIGNyZWF0ZSwgYWRkQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCB3cml0ZSwgZGV0ZWN0LHN0eWxlLGF0dHJpYnN9IGZyb20gXCIuLi9zY3JpcHRzL1FvTFwiXG5cbmxldCBzY29yZSA9IC0xO1xuXG5jb25zdCBpbmNyZW1lbnRTY29yZSA9IChzY29yZWVsZSA9IFwiYnJ1aFwiKSA9PiB7XG4gICAgc2NvcmUrPSAxO1xuICAgIGlmIChzY29yZWVsZSA9PT0gXCJicnVoXCIpe1xuICAgICAgICB3cml0ZShmaW5kKFwiI3Njb3JlXCIpLCBgU2NvcmU6ICR7c2NvcmV9YClcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgd3JpdGUoc2NvcmVlbGUsIGBTY29yZTogJHtzY29yZX1gKVxuICAgIH1cblxufVxuXG5jb25zdCBkZWJ1Z1Rvb2xzID0gKCkgPT57XG4gICAgY29uc3QgZGVidWdXcmFwID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKGRlYnVnV3JhcCwgW1wiZGVidWctd3JhcHBlclwiXSk7XG4gICAgc3R5bGUoZGVidWdXcmFwLGBcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIHRvcDo2NjBweDtcbiAgICBgKVxuXG4gICAgY29uc3Qgc2xpZGVyID0gY3JlYXRlKFwiaW5wdXRcIik7XG4gICAgc2xpZGVyLmlkID0gXCJzbGlkZXIxXCI7XG4gICAgZGV0ZWN0KHNsaWRlciwgXCJpbnB1dFwiLCBzbGlkZUZ1bmMpO1xuICAgIGF0dHJpYnMoc2xpZGVyLFtcInR5cGVcIiwgXCJtaW5cIiwgXCJtYXhcIiwgXCJ2YWx1ZVwiLCBcImNsYXNzXCJdLCBbXCJyYW5nZVwiLCBcIjBcIiwgXCI2NDBcIixcIjBcIixcInNsaWRleVwiXSlcbiAgICByZW5kZXIoZGVidWdXcmFwLCBzbGlkZXIpO1xuXG5cbiAgICBjb25zdCBzbGlkZXIyID0gY3JlYXRlKFwiaW5wdXRcIik7XG4gICAgc2xpZGVyMi5pZCA9IFwic2xpZGVyMlwiO1xuICAgIGRldGVjdChzbGlkZXIyLCBcImlucHV0XCIsIHNsaWRlRnVuYyk7XG4gICAgYXR0cmlicyhzbGlkZXIyLFtcInR5cGVcIiwgXCJtaW5cIiwgXCJtYXhcIiwgXCJ2YWx1ZVwiLCBcImNsYXNzXCJdLCBbXCJyYW5nZVwiLCBcIjBcIiwgXCI2NDBcIixcIjBcIixcInNsaWRleVwiXSlcbiAgICByZW5kZXIoZGVidWdXcmFwLCBzbGlkZXIyKTtcblxuICAgIGNvbnN0IHNjb3JlZWxlID0gY3JlYXRlKFwiaDFcIilcbiAgICBzY29yZWVsZS5pZCA9IFwic2NvcmVcIjtcbiAgICBzdHlsZShzY29yZWVsZSwgYFxuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgZm9udC1mYW1pbHk6IG11bnJvO1xuICAgIGApXG4gICAgaW5jcmVtZW50U2NvcmUoc2NvcmVlbGUpO1xuICAgIHJlbmRlcihkZWJ1Z1dyYXAsIHNjb3JlZWxlKTtcblxuICAgIHJldHVybiBkZWJ1Z1dyYXA7XG59XG5cbmNvbnN0IHNsaWRlRnVuYyA9IChlKSA9PiB7XG4gICAgaWYgKGUudGFyZ2V0LmlkID09PSBcInNsaWRlcjFcIil7XG4gICAgICAgIGNvbnN0IGNhbnYgPSBmaW5kKFwiLmxheWVyLTFcIik7XG4gICAgICAgIGNhbnYuc3R5bGUubGVmdCA9IGAke2UudGFyZ2V0LnZhbHVlfXB4YFxuICAgIH1cbiAgICBlbHNlIGlmIChlLnRhcmdldC5pZCA9PT0gXCJzbGlkZXIyXCIpe1xuICAgICAgICBjb25zdCBidXRPdiA9IGZpbmQoXCIuYnV0dG9uLW92ZXJsYXlcIik7XG4gICAgICAgIGJ1dE92LnN0eWxlLmxlZnQgPSBgJHtlLnRhcmdldC52YWx1ZX1weGBcbiAgICB9XG59XG5cbmV4cG9ydHtkZWJ1Z1Rvb2xzLCBpbmNyZW1lbnRTY29yZSwgc2NvcmV9OyIsImltcG9ydCBjbGljayBmcm9tIFwiLi4vc291bmRzL2NsaWNrLm1wM1wiXG5pbXBvcnQgY2xvc2UgZnJvbSBcIi4uL3NvdW5kcy9jbG9zZS5tcDNcIlxuaW1wb3J0IGNvaW4gZnJvbSBcIi4uL3NvdW5kcy9jb2luLm1wM1wiXG5pbXBvcnQgZXBpYyBmcm9tIFwiLi4vc291bmRzL2VwaWNfYmF0dGxlX29mX2ZhbnRhc2llcy5tcDNcIlxuaW1wb3J0IHN3aXBlIGZyb20gXCIuLi9zb3VuZHMvc3dpcGUubXAzXCJcbmltcG9ydCBvcGVuIGZyb20gXCIuLi9zb3VuZHMvb3Blbi5tcDNcIlxuXG5sZXQgYXVkaW9zID0gW107XG5cbmNvbnN0IG1ha2VBdWRpbyA9IChzcmMsbmFtZSkgPT4ge1xuICAgIHZhciBhdWRpbyA9IG5ldyBBdWRpbyhzcmMpO1xuICAgIGF1ZGlvcy5wdXNoKHtcbiAgICAgICAgYXVkaW8sXG4gICAgICAgIG5hbWVcbiAgICB9KTtcbn1cblxuY29uc3QgaW5pdEF1ZGlvcyA9ICgpID0+e1xuICAgIG1ha2VBdWRpbyhjbGljaywgXCJjbGlja1wiKTtcbiAgICBtYWtlQXVkaW8oY2xvc2UsIFwiY2xvc2VcIik7XG4gICAgbWFrZUF1ZGlvKGNvaW4sIFwiY29pblwiKTtcbiAgICBtYWtlQXVkaW8oZXBpYywgXCJlcGljXCIpO1xuICAgIG1ha2VBdWRpbyhzd2lwZSwgXCJzd2lwZVwiKTtcbiAgICBtYWtlQXVkaW8ob3BlbiwgXCJvcGVuXCIpO1xufVxuXG5jb25zdCBwbGF5QXVkaW8gPSAobmFtZSkgPT57XG4gICAgdmFyIG9iaiA9IGF1ZGlvcy5maW5kKG9iaiA9PiB7XG4gICAgICAgIHJldHVybiBvYmoubmFtZSA9PT0gbmFtZVxuICAgICAgfSlcbiAgICAgIG9iai5hdWRpby5wbGF5KCk7XG59XG5cbmV4cG9ydCB7aW5pdEF1ZGlvcywgcGxheUF1ZGlvfSIsImltcG9ydCB7cmVuZGVyLCByZW1vdmUsIGNyZWF0ZSwgYWRkQ2xhc3MsIHJlbUNsYXNzLCBoYXNDbGFzcywgYXR0cmlicywgZmluZCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuaW1wb3J0IGNsb3NlIGZyb20gXCIuLi9pbWFnZXMvY2xvc2UucG5nXCJcbmltcG9ydCBjbG9zZXNvdW5kIGZyb20gXCIuLi9zb3VuZHMvY2xvc2UubXAzXCJcbmltcG9ydCB7IHBsYXlBdWRpbyB9IGZyb20gXCIuLi9zY3JpcHRzL3NvdW5kc1wiO1xuXG5sZXQgYnV0T3Y7XG5sZXQgY3VycmVudENvZGUgPSAwO1xuLypcbiAgICBQcm9tcHQgY29kZTpcbiAgICAxOiB0ZXN0X3Byb21wdFxuICAgIDI6IHdpbiBzY3JlZW5cbiAgICAzOiB0dXRvcmlhbFxuXG4qL1xuXG5jb25zdCB0b2dnbGVQcm9tcHQgPSAoZSkgPT4ge1xuICAgIGxldCBjb2RlID0gMDtcbiAgICBsZXQgcHJvbXB0ID0gXCJcIjtcbiAgICBpZiAodHlwZW9mIGUgPT09ICdzdHJpbmcnIHx8IGUgaW5zdGFuY2VvZiBTdHJpbmcpe1xuICAgICAgICBpZiAoZSA9PT0gXCJ3aW5cIil7XG4gICAgICAgICAgICBjb2RlID0gMjtcbiAgICAgICAgICAgIHByb21wdCA9IFwieW91IHdvbiFcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZSA9PT0gXCJ0dXRvcmlhbFwiKXtcbiAgICAgICAgICAgIGNvZGUgPSAzO1xuICAgICAgICAgICAgcHJvbXB0ID0gXCJ3ZWxjb21lISBob3cgdG8gcGxheTogZmluZCBvdXQhXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgaWYgKGhhc0NsYXNzKGUudGFyZ2V0LCBcImNsb3NlcHJvbXB0XCIpKXtcbiAgICAgICAgICAgIHBsYXlBdWRpbyhcImNsb3NlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLnRhcmdldC5pZCA9PT0gXCJwcm9tcHRidXQtMVwiIHx8IGUudGFyZ2V0LmlkID09PSBcImNsb3NlcHJvbXB0LTFcIil7XG4gICAgICAgICAgICBjb2RlID0gMTtcbiAgICAgICAgICAgIHByb21wdCA9IFwieW91IGhhdmUgYmVlbiBwcm9tcHRlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUudGFyZ2V0LmlkID09PSBcImNsb3NlcHJvbXB0LTJcIil7XG4gICAgICAgICAgICBjb2RlID0gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLnRhcmdldC5pZCA9PT0gXCJjbG9zZXByb21wdC0zXCIpe1xuICAgICAgICAgICAgY29kZSA9IDM7XG4gICAgICAgIH1cbiAgICB9ICAgXG4gICAgXG5cbiAgICBjb25zdCBleGlzdHMgPSBmaW5kKGAjcHJvbXB0LSR7Y29kZX1gKTtcbiAgICBpZiAoZXhpc3RzICE9IG51bGwpIHsgXG4gICAgICAgIGFkZENsYXNzKGV4aXN0cywgW1wiZW5kLXN0YXRlXCJdKTtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHJlbW92ZShmaW5kKFwiLndyYXBwZXJcIiksIGV4aXN0cyksIDIwMCk7XG4gICAgfSBcbiAgICBlbHNle1xuICAgICAgICBjcmVhdGVQcm9tcHQocHJvbXB0LGNvZGUpO1xuICAgIH1cbn1cblxuY29uc3QgY3JlYXRlUHJvbXB0ID0gKG15dGV4dCwgY29kZSkgPT4ge1xuICAgIGNvbnN0IGJ1dE92ID0gZmluZChcIi5idXR0b24tb3ZlcmxheVwiKTtcbiAgICBjb25zdCBwcm9tcHQgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgICAgIGFkZENsYXNzKHByb21wdCwgW1wicHJvbXB0XCIsIFwic3RhcnQtc3RhdGVcIl0pO1xuICAgICAgICBhdHRyaWJzKHByb21wdCwgW1wiaWRcIiwgXCJkcmFnZ2FibGVcIl0sIFtgcHJvbXB0LSR7Y29kZX1gLCBcImZhbHNlXCJdKVxuXG4gICAgICAgIC8vbWFrZSBwcm9tcHQgaW5kZXggc3lzdGVtIHBsc1xuICAgICAgICBzdHlsZShwcm9tcHQsIGBcbiAgICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogc2xhdGVncmF5O1xuICAgICAgICAgICAgYm9yZGVyOiA1cHggc29saWQgZGFya3NsYXRlZ3JheTtcbiAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC4xcztcbiAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcbiAgICAgICAgICAgIGhlaWdodDogMTAwcHg7XG4gICAgICAgICAgICBsZWZ0OiAyMDBweDtcbiAgICAgICAgICAgIHRvcDogMjUwcHg7XG4gICAgICAgIGApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZHJhZyA9IGRyYWdCYXIoY29kZSk7XG4gICAgICAgIHJlbmRlcihwcm9tcHQsIGRyYWcpO1xuXG4gICAgICAgIHJlbmRlcihwcm9tcHQsIGNyZWF0ZVRleHQobXl0ZXh0KSk7XG4gICAgICAgIHJlbmRlcihmaW5kKFwiLndyYXBwZXJcIiksIHByb21wdCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHByb21wdC5jbGFzc0xpc3QucmVtb3ZlKFwic3RhcnQtc3RhdGVcIiksIDEwMCk7XG59XG5cbmNvbnN0IGNyZWF0ZVRleHQgPSAobXl0ZXh0KSA9PntcbiAgICBjb25zdCB0ZXh0ID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgICAgICBzdHlsZSh0ZXh0LCBgXG4gICAgICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjpjZW50ZXI7XG4gICAgICAgICAgICBtYXJnaW46MTVweCA1cHg7XG4gICAgICAgICAgICBmb250LWZhbWlseTogJ211bnJvJztcbiAgICAgICAgYCk7XG4gICAgd3JpdGUodGV4dCwgbXl0ZXh0KTtcblxuICAgIHJldHVybiB0ZXh0O1xufVxuXG5cbmNvbnN0IGRyYWdCYXIgPSAoY29kZSkgPT4ge1xuICAgIGNvbnN0IGJhciA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhiYXIsIFtcImJhclwiXSk7XG4gICAgYXR0cmlicyhiYXIsIFtcImlkXCIsIFwiZHJhZ2dhYmxlXCJdLCBbYGJhci0ke2NvZGV9YCwgXCJmYWxzZVwiXSlcbiAgICBzdHlsZShiYXIsIGBcbiAgICAgICAgZGlzcGxheTpmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtzbGF0ZWdyYXk7XG4gICAgICAgIGhlaWdodDogMjBweDtcbiAgICBgKVxuICAgIFxuXG4gICAgY29uc3QgY2xvc2VQcm9tcHQgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoY2xvc2VQcm9tcHQsIFtcImJ1dHRvblwiLCBcImNsb3NlcHJvbXB0XCJdKTtcbiAgICBjbG9zZVByb21wdC5pZCA9ICAgYGNsb3NlcHJvbXB0LSR7Y29kZX1gO1xuICAgIHN0eWxlKGNsb3NlUHJvbXB0LCBgXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKCR7Y2xvc2V9KTtcbiAgICBgKTtcblxuICAgIHJlbmRlcihiYXIsIGNsb3NlUHJvbXB0KTtcbiAgICBkZXRlY3QoYmFyLCBcIm1vdXNlZG93blwiLCBtb3VzZURvd24pO1xuICAgIGRldGVjdChiYXIsIFwibW91c2V1cFwiLCBtb3VzZVVwKTtcbiAgICAvL2ZpeCB0aGUgaXNzdWUgeW91IGtub3cgd2hhdCBpdCBpc1xuXG4gICAgZGV0ZWN0KGNsb3NlUHJvbXB0LCBcImNsaWNrXCIsIHRvZ2dsZVByb21wdCk7XG5cbiAgICByZXR1cm4gYmFyO1xufVxuXG5jb25zdCBtb3VzZURvd24gPSAoZSkgPT57XG4gICAgY29uc3QgY29kZSA9IGUudGFyZ2V0LmlkLnNwbGl0KCctJylbMV07XG4gICAgY3VycmVudENvZGUgPSBjb2RlO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBkZXRlY3QoZG9jdW1lbnQuYm9keSwgXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlKTtcbiAgICBhZGRDbGFzcyhmaW5kKGAjcHJvbXB0LSR7Y29kZX1gKSwgW1wibm90cmFuc2l0aW9uXCJdKTtcbn1cblxuY29uc3QgbW91c2VNb3ZlID0gKGV2dCkgPT4ge1xuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHByb21wdCA9IGZpbmQoYCNwcm9tcHQtJHtjdXJyZW50Q29kZX1gKTtcbiAgICBjb25zdCByZWN0ID0gZmluZChcIi53cmFwcGVyXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IG1vdXNlUG9zID0ge1xuICAgICAgICB4OiBldnQuY2xpZW50WCAtIHJlY3QubGVmdCxcbiAgICAgICAgeTogZXZ0LmNsaWVudFkgLSByZWN0LnRvcFxuICAgIH07XG4gICAgXG4gICAgaWYgKHByb21wdCAhPT0gbnVsbClcbiAgICB7XG4gICAgICAgIHByb21wdC5zdHlsZS50b3AgPSBtb3VzZVBvcy55IC0xMCArXCJweFwiO1xuICAgICAgICBwcm9tcHQuc3R5bGUubGVmdCA9IG1vdXNlUG9zLnggLTEwMCArIFwicHhcIjtcbiAgICB9XG59XG5cbmNvbnN0IG1vdXNlVXAgPSAoZSkgPT57XG4gICAgdW5kZXRlY3QoZG9jdW1lbnQuYm9keSxcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmUpO1xuICAgIHJlbUNsYXNzKGZpbmQoYCNwcm9tcHQtJHtjdXJyZW50Q29kZX1gKSwgW1wibm90cmFuc2l0aW9uXCJdKTtcbiAgICBjdXJyZW50Q29kZSA9IDA7XG59XG5cbmNvbnN0IHByb21wdE9iaiA9ICgpID0+IHtcblxufVxuZXhwb3J0IHt0b2dnbGVQcm9tcHR9OyIsImltcG9ydCBmbG9vcl90aWxlcyBmcm9tIFwiLi4vaW1hZ2VzL2Zsb29yX3RpbGVzLnBuZ1wiO1xuXG5sZXQgdGlsZXM7XG5jb25zdCBjb2xsaXNpb25fdGlsZXMgPSBbMTEsMTQsMTUsMTYsMTldXG5cbmNvbnN0IHVwZGF0ZUJhY2tncm91bmQgPSAoY3R4LCB3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgcmVuZGVyVGlsZXModGlsZXMsY3R4KTtcbn1cblxuY29uc3QgaW5pdEJhY2tncm91bmQgPSAoY3R4LCB3aWR0aCwgaGVpZ2h0KSA9PntcbiAgICB0aWxlcyA9IGdlbmVyYXRlVGlsZXMoKTtcbiAgICB0aWxlc1syXVsxXSA9IDExO1xuICAgIHRpbGVzWzldWzldID0gMTg7XG4gICAgdGlsZXNbOV1bOF0gPSAxODtcbiAgICB0aWxlc1s4XVs4XSA9IDE5O1xuICAgIHRpbGVzWzhdWzldID0gMTk7XG4gICAgY29uc29sZS5sb2codGlsZXMpO1xuICAgIHVwZGF0ZUJhY2tncm91bmQoY3R4LCB3aWR0aCwgaGVpZ2h0KTtcbn1cblxuY29uc3QgcmVuZGVyVGlsZXMgPSAodGlsZXMsY3R4KSA9PntcbiAgICB0aWxlcy5mb3JFYWNoKChyb3csaW5kZXgpID0+IHtcbiAgICAgICAgcm93LmZvckVhY2goKHRpbGUsaW5kZXgyKSA9PntcbiAgICAgICAgICAgIGRyYXdUaWxlKHRpbGUsIGluZGV4LCBpbmRleDIsIGN0eCk7XG4gICAgICAgIH0pXG4gICAgfSlcbn1cblxuY29uc3QgZHJhd1RpbGU9KHRpbGUseCx5LCBjdHgpID0+e1xuICAgIGNvbnN0IHNpemUgPSA2NDtcbiAgICBsZXQgdGlsZXNldCA9IG5ldyBJbWFnZSgpO1xuICAgIHRpbGVzZXQuc3JjID0gZmxvb3JfdGlsZXM7XG4gICAgdGlsZXNldC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9kcmF3SW1hZ2UoaW1hZ2UsIHN4LCBzeSwgc1dpZHRoLCBzSGVpZ2h0LCBkeCwgZHksIGRXaWR0aCwgZEhlaWdodClcbiAgICAgICAgLy93aGVyZSBzID0gc3ByaXRlLCBkID0gZHJhd1xuICAgICAgICAvL2N0eC5yb3RhdGUoKDkwICogTWF0aC5QSSkgLyAxODApO1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRpbGVzZXQsIHRpbGUqc2l6ZSwgMCwgc2l6ZSwgc2l6ZSwgeCpzaXplLCB5KnNpemUsIHNpemUsc2l6ZSk7XG4gICAgfSAgXG59XG5cbmNvbnN0IG1vZGlmeVRpbGUgPSAoeCx5LCB0aWxlKSA9PiB7XG4gICAgdGlsZXNbeF1beV0gPSB0aWxlO1xufVxuXG5jb25zdCBnZXRUaWxlcyA9ICgpID0+IHtcbiAgICByZXR1cm4odGlsZXMpO1xufVxuXG5jb25zdCBnZW5lcmF0ZVRpbGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IGFyciA9IG5ldyBBcnJheSgxMCkuZmlsbCgwKS5tYXAoKCk9Pm5ldyBBcnJheSgxMCkuZmlsbCgxMCkpO1xuICAgIHJldHVybiBhcnI7XG59XG5cbmNvbnN0IGNsZWFyID0gKGN0eCwgd2lkdGgsIGhlaWdodCkgPT57XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbn1cblxuY29uc3QgZGV0ZWN0VGlsZSA9ICh4LCB5KSA9PiB7XG4gICAgY29uc3QgaSA9IE1hdGguZmxvb3IoeC82NClcbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcih5LzY0KVxuICAgIHJldHVybiB0aWxlc1tpXVtqXVxufVxuXG5leHBvcnQge2luaXRCYWNrZ3JvdW5kLCB1cGRhdGVCYWNrZ3JvdW5kLCBjbGVhciwgbW9kaWZ5VGlsZSwgZ2V0VGlsZXMsIGNvbGxpc2lvbl90aWxlcywgZGV0ZWN0VGlsZX0iLCJpbXBvcnQge3JlbmRlciwgcmVtb3ZlLCBjcmVhdGUsIGFkZENsYXNzLCBoYXNDbGFzcywgcmVtQ2xhc3MsIGZpbmQsIHdyaXRlLCBkZXRlY3QsIHVuZGV0ZWN0LCBzdHlsZSwgYXR0cmlic30gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcbmltcG9ydCBjYXJzcmMgZnJvbSBcIi4uL2ltYWdlcy9DYXJfdXBkYXRlZC5wbmdcIlxuaW1wb3J0IHsgZGV0ZWN0VGlsZSwgZ2V0VGlsZXMgfSBmcm9tIFwiLi4vc2NyaXB0cy9jYW52YXNGdW5jc1wiXG5pbXBvcnQgaGxzcmMgZnJvbSBcIi4uL2ltYWdlcy9kZWNvci5wbmdcIlxuaW1wb3J0IHsgY29sbGlzaW9uX3RpbGVzIH0gZnJvbSBcIi4uL3NjcmlwdHMvY2FudmFzRnVuY3NcIlxuaW1wb3J0IGNvaW5zcmMgZnJvbSBcIi4uL2ltYWdlcy9jb2luLnBuZ1wiXG5cbmxldCBzY19saXN0ID0gW107XG5sZXQgY29pbl9saXN0ID0gW107XG5cbmNvbnN0IHNwcml0ZUNhbnZhcyA9ICh3cmFwcGVyLCBuYW1lLCBzaXplLCBpbWdzcmMsIHgsIHksIHNwZWVkLCBzaG93LCBmcmFtZXMpID0+e1xuXG4gICAgY29uc3QgY2FudiA9IGNyZWF0ZShcImNhbnZhc1wiKTtcbiAgICBhZGRDbGFzcyhjYW52LCBbXCJzcHJpdGVjYW52YXNcIl0pO1xuICAgIGF0dHJpYnMoY2FudiwgW1wiaWRcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiXSwgW25hbWUsIGAke3NpemV9cHhgLCBgJHtzaXplfXB4YF0pO1xuXG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLnNyYyA9IGltZ3NyYztcblxuICAgIHN0eWxlKGNhbnYsIGBcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOm5vbmU7XG4gICAgICAgIHRvcDogJHt5fXB4O1xuICAgICAgICBsZWZ0OiAke3h9cHg7XG4gICAgYCk7ICAgIFxuXG4gICAgbGV0IG9iaiA9IHsgXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHNpemUsXG4gICAgICAgIGVsZTogY2FudiwgXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGRpcmVjdGlvbjogXCJsZWZ0XCIsXG4gICAgICAgIGltZyxcbiAgICAgICAgc3BlZWQsXG4gICAgICAgIGRpcmVjdGlvbl9kYXRhOiB7XCJub25lXCI6MH0sXG4gICAgICAgIGRyYXdfaW5kZXg6IDAsXG4gICAgICAgIGZyYW1lOjAsXG4gICAgICAgIHNob3csXG4gICAgICAgIGZyYW1lcyxcbiAgICAgICAgdXBkYXRlc19wZXJfZnJhbWVzOiAyLFxuICAgICAgICB0aW1lcjogMSxcbiAgICB9O1xuXG4gICAgaWYgKG5hbWUgPT09IFwiY2FyXCIpe1xuICAgICAgICBvYmouZGlyZWN0aW9uX2RhdGEgPSB7XCJsZWZ0XCI6MCxcImRvd25sZWZ0XCI6MSxcImRvd25cIjoyLFwidXByaWdodFwiOjMsXCJkb3ducmlnaHRcIjo0LFwidXBsZWZ0XCI6NSxcInVwXCI6NixcInJpZ2h0XCI6N31cbiAgICB9XG5cbiAgICBzY19saXN0LnB1c2gob2JqKTtcblxuICAgIGlmIChuYW1lID09PSBcImNvaW5cIil7XG4gICAgICAgIGNvaW5fbGlzdC5wdXNoKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKHNob3cpe1xuICAgICAgICBjb25zdCBjdHggPSBjYW52LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsc2l6ZSxzaXplKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCA2NCowLCBzaXplLCBzaXplLCAwLCAwLCBzaXplLHNpemUpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlcih3cmFwcGVyLCBjYW52KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2Fudjtcbn1cblxuY29uc3QgbW92ZVRvd2FyZHMgPSAoaW5kZXgsIHgsIHkpID0+IHtcbiAgICBjb25zdCBvYmogPSBzY19saXN0W2luZGV4XVxuICAgIGNvbnN0IGR4ID0geC1vYmoueDtcbiAgICBjb25zdCBkeSA9IHktb2JqLnk7XG4gICAgY29uc3QgbWFnID0gTWF0aC5zcXJ0KGR4KmR4ICsgZHkqZHkpO1xuICAgIGNvbnN0IHV4ID0gKGR4L21hZykqb2JqLnNwZWVkO1xuICAgIGNvbnN0IHV5ID0gKGR5L21hZykqb2JqLnNwZWVkO1xuICAgIGNvbnN0IG54ID0gb2JqLngrdXg7XG4gICAgY29uc3QgbnkgPSBvYmoueSt1eTtcbiAgICBjb25zdCBzaXplID0gc2NfbGlzdFtpbmRleF0uc2l6ZVxuICAgIGNvbnN0IGluY29taW5nX3RpbGUgPSBkZXRlY3RUaWxlKG54LG55KVxuICAgIGlmIChtYWc+b2JqLnNwZWVkICYmICFjb2xsaXNpb25fdGlsZXMuaW5jbHVkZXMoaW5jb21pbmdfdGlsZSkpe1xuICAgICAgICBzY19saXN0W2luZGV4XS54ID0gbng7XG4gICAgICAgIHNjX2xpc3RbaW5kZXhdLnkgPSBueTtcbiAgICAgICAgdGVsZXBvcnQoaW5kZXgsIG54LXNpemUvMiwgbnktc2l6ZS8yKVxuICAgICAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4oLXV5L3V4KTtcbiAgICAgICAgaWYodXggPCAwKXtcbiAgICAgICAgICAgIGlmICgtdXkgPCAwKXtcbiAgICAgICAgICAgICAgICBhbmdsZSA9IGFuZ2xlIC0gTWF0aC5QSTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBhbmdsZSsgTWF0aC5QSTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhbmdsZSA9IGFuZ2xlKigxODAvTWF0aC5QSSlcbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IFwibGVmdFwiO1xuICAgICAgICBpZiAoYW5nbGUgPj0gMjIuNSAmJiBhbmdsZSA8PSA2Ny41KSBkaXJlY3Rpb24gPSBcInVwcmlnaHRcIlxuICAgICAgICBlbHNlIGlmIChhbmdsZSA+PSA2Ny41ICYmIGFuZ2xlIDw9IDExMi41KSBkaXJlY3Rpb24gPSBcInVwXCJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPj0gMTEyLjUgJiYgYW5nbGUgPD0gMTU3LjUpIGRpcmVjdGlvbiA9IFwidXBsZWZ0XCJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPD0gMjIuNSAmJiBhbmdsZSA+PSAtMjIuNSkgZGlyZWN0aW9uID0gXCJyaWdodFwiXG4gICAgICAgIGVsc2UgaWYgKGFuZ2xlIDw9IC0yMi41ICYmIGFuZ2xlID49IC02Ny41KSBkaXJlY3Rpb24gPSBcImRvd25yaWdodFwiXG4gICAgICAgIGVsc2UgaWYgKGFuZ2xlIDw9IC02Ny41ICYmIGFuZ2xlID49IC0xMTIuNSkgZGlyZWN0aW9uID0gXCJkb3duXCJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPD0gLTExMi41ICYmIGFuZ2xlID49IC0xNTcuNSkgZGlyZWN0aW9uID0gXCJkb3dubGVmdFwiXG4gICAgICAgIGVsc2UgaWYgKGFuZ2xlID49IDE1Ny41ICYmIGFuZ2xlIDw9IC0xNTcuNSkgZGlyZWN0aW9uID0gXCJsZWZ0XCJcblxuICAgICAgICBkcmF3U0MoMCwgXCJpbmNyZW1lbnRcIiwgZGlyZWN0aW9uKTtcbiAgICB9XG59XG5cbmNvbnN0IHNldFNob3cgPSAoaW5kZXgsIHNob3cpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gZmluZChcIi53cmFwcGVyXCIpO1xuICAgIHNjX2xpc3RbaW5kZXhdLnNob3cgPSBzaG93O1xuICAgIGlmKHNob3cpIHtcbiAgICAgICAgaWYgKGZpbmQoYCMke3NjX2xpc3RbaW5kZXhdLm5hbWV9YCkgPT09IG51bGwpIHJlbmRlcih3cmFwcGVyLCBzY19saXN0W2luZGV4XS5lbGUpO1xuICAgICAgICBpZiAoaW5kZXggPT09IDEpIGRyYXdTQygxLDEsXCJub25lXCIpXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZmluZChgIyR7c2NfbGlzdFtpbmRleF0ubmFtZX1gKSAhPT0gbnVsbCkgcmVtb3ZlKHdyYXBwZXIsIHNjX2xpc3RbaW5kZXhdLmVsZSk7XG4gICAgfVxufVxuXG5jb25zdCBkcmF3U0MgPSAoaW5kZXgsIGZyYW1lLCBkaXJlY3Rpb24pID0+IHtcbiAgICBsZXQgZnJhbSA9IGZyYW1lO1xuICAgIGlmIChmcmFtZSA9PT0gXCJpbmNyZW1lbnRcIil7XG4gICAgICAgIGlmIChzY19saXN0W2luZGV4XS50aW1lciA9PT0gc2NfbGlzdFtpbmRleF0udXBkYXRlc19wZXJfZnJhbWVzKXtcbiAgICAgICAgICAgIGZyYW0gPSBzY19saXN0W2luZGV4XS5mcmFtZSArIDE7XG4gICAgICAgICAgICBzY19saXN0W2luZGV4XS5mcmFtZSA9IGZyYW07XG4gICAgICAgICAgICBzY19saXN0W2luZGV4XS50aW1lciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzY19saXN0W2luZGV4XS50aW1lciArPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChmcmFtID09PSBzY19saXN0W2luZGV4XS5mcmFtZXMpe1xuICAgICAgICBpZiAoc2NfbGlzdFtpbmRleF0ubmFtZSA9PT0gXCJoaWdobGlnaHRcIikgZnJhbSA9IDE7XG4gICAgICAgIGVsc2UgZnJhbSA9IDBcbiAgICAgICAgc2NfbGlzdFtpbmRleF0uZnJhbWUgPSBmcmFtO1xuICAgIH1cbiAgICBpZiAoc2NfbGlzdFtpbmRleF0udGltZXIgPT09IDEpe1xuICAgIHNjX2xpc3RbaW5kZXhdLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICBjb25zdCBkcmFpbmQgPSBzY19saXN0W2luZGV4XS5kaXJlY3Rpb25fZGF0YVtkaXJlY3Rpb25dO1xuICAgIHNjX2xpc3RbaW5kZXhdLmRyYXdfaW5kZXggPSBkcmFpbmQ7XG4gICAgY29uc3QgY3R4ID0gc2NfbGlzdFtpbmRleF0uZWxlLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb25zdCBzaXplID0gc2NfbGlzdFtpbmRleF0uc2l6ZTtcbiAgICBjb25zdCBpbWcgPSBzY19saXN0W2luZGV4XS5pbWc7XG4gICAgY3R4LmNsZWFyUmVjdCgwLDAsc2l6ZSxzaXplKTtcbiAgICBjdHguZHJhd0ltYWdlKGltZywgc2l6ZSpmcmFtLCBzaXplKmRyYWluZCwgc2l6ZSwgc2l6ZSwgMCwgMCwgc2l6ZSxzaXplKTtcbiAgICB9XG59XG5cbmNvbnN0IHRlbGVwb3J0ID0gKGluZGV4LCB4LCB5KSA9PntcbiAgICBzdHlsZShzY19saXN0W2luZGV4XS5lbGUsIGBcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOm5vbmU7XG4gICAgICAgIHRvcDogJHt5fXB4O1xuICAgICAgICBsZWZ0OiAke3h9cHg7XG4gICAgYCk7XG59XG5cbmNvbnN0IGRlc3Ryb3lTQyA9IChvYmopID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHNjX2xpc3QuaW5kZXhPZihvYmopO1xuICAgIGlmIChpbmRleCA+IC0xKSB7IC8vIG9ubHkgc3BsaWNlIGFycmF5IHdoZW4gaXRlbSBpcyBmb3VuZFxuICAgICAgICBpZiAoc2NfbGlzdFtpbmRleF0ubmFtZSA9PT0gXCJjb2luXCIpe1xuICAgICAgICAgICAgY29uc3QgaW5kZXgyID0gY29pbl9saXN0LmluZGV4T2Yob2JqKTtcbiAgICAgICAgICAgIGlmKGluZGV4MiA+IC0xKXtcbiAgICAgICAgICAgICAgICBjb2luX2xpc3Quc3BsaWNlKGluZGV4MiwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlKGZpbmQoXCIud3JhcHBlclwiKSwgc2NfbGlzdFtpbmRleF0uZWxlKTtcbiAgICAgICAgc2NfbGlzdC5zcGxpY2UoaW5kZXgsIDEpOyAvLyAybmQgcGFyYW1ldGVyIG1lYW5zIHJlbW92ZSBvbmUgaXRlbSBvbmx5XG4gICAgfVxufVxuXG5jb25zdCBpbml0U0MgPSAod3JhcHBlcikgPT57XG4gICAgY29uc3QgY2FyID0gc3ByaXRlQ2FudmFzKHdyYXBwZXIsIFwiY2FyXCIsIDY0LCBjYXJzcmMsIDMwMCwgMjAwLCA1LCB0cnVlLDMpO1xuICAgIGNvbnN0IGhpZ2hsaWdodCA9IHNwcml0ZUNhbnZhcyh3cmFwcGVyLCBcImhpZ2hsaWdodFwiLCA2NCwgaGxzcmMsIDAsMCwgMCwgZmFsc2UsOClcbiAgICBjb25zdCBjb2luID0gc3ByaXRlQ2FudmFzKHdyYXBwZXIsIFwiY29pblwiLCA2NCwgY29pbnNyYywgNDAwLCA1MDAsIDAsIHRydWUsIDEyKVxufVxuXG5leHBvcnR7aW5pdFNDLCBtb3ZlVG93YXJkcyAsc2V0U2hvdywgZHJhd1NDLCB0ZWxlcG9ydCwgY29pbl9saXN0LCBkZXN0cm95U0MsIHNwcml0ZUNhbnZhc30iLCJpbXBvcnQge3JlbmRlciwgcmVtb3ZlLCBjcmVhdGUsIGFkZENsYXNzLCByZW1DbGFzcywgaGFzQ2xhc3MsIGF0dHJpYnMsIGZpbmQsIHdyaXRlLCBkZXRlY3QsIHVuZGV0ZWN0LCBzdHlsZX0gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcbmltcG9ydCBzaGFkb3cgZnJvbSBcIi4uL2ltYWdlcy9zaGFkLnBuZ1wiXG5pbXBvcnQgeyBwbGF5QXVkaW8gfSBmcm9tIFwiLi4vc2NyaXB0cy9zb3VuZHNcIjtcblxubGV0IGN1cnJlbnREaWFsb2d1ZSA9IDA7XG5sZXQgZGlhbG9ndWVzID0gW107XG5cbmNvbnN0IG5leHREaWFsb2d1ZSA9IChjb2RlKSA9PiB7XG4gICAgcGxheUF1ZGlvKFwic3dpcGVcIik7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoY29kZSkpe1xuICAgICAgICBjdXJyZW50RGlhbG9ndWUgPSBjb2RlO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhjdXJyZW50RGlhbG9ndWUpXG4gICAgY29uc3QgZGlhbG9ndWUgPSBjcmVhdGVEaWFsb2d1ZShkaWFsb2d1ZXNbY3VycmVudERpYWxvZ3VlXSk7XG4gICAgY3VycmVudERpYWxvZ3VlICs9IDE7XG4gICAgZGV0ZWN0KGRpYWxvZ3VlLCBcImNsaWNrXCIsIGRlbGV0ZURpYWxvZ3VlKTtcbn1cblxuY29uc3QgZGVsZXRlRGlhbG9ndWUgPSAoZSkgPT57XG4gICAgcGxheUF1ZGlvKFwic3dpcGVcIik7XG4gICAgbGV0IGRpYWxvZ3VlID0gZS50YXJnZXQ7XG4gICAgaWYgKCFoYXNDbGFzcyhkaWFsb2d1ZSwgXCJkaWFsb2d1ZVwiKSl7XG4gICAgICAgIGRpYWxvZ3VlID0gZS50YXJnZXQucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgdW5kZXRlY3QoZGlhbG9ndWUsIFwiY2xpY2tcIiwgZGVsZXRlRGlhbG9ndWUpO1xuICAgIGFkZENsYXNzKGRpYWxvZ3VlLCBbXCJkaWFsb2d1ZS1zdGFydC1lbmRcIl0pO1xuICAgIHNldFRpbWVvdXQoKCk9PiB7XG4gICAgICAgIHJlbW92ZShmaW5kKFwiLmdhbWVcIiksIGRpYWxvZ3VlKVxuICAgICAgICBpZiAoZGlhbG9ndWVzW2N1cnJlbnREaWFsb2d1ZS0xXS5mb2xsb3cpe1xuICAgICAgICAgICAgbmV4dERpYWxvZ3VlKCk7XG4gICAgICAgIH1cbiAgICB9LCAyMDApO1xufVxuXG5jb25zdCBkaWFsb2d1ZU9iaiA9ICh0ZXh0LCBjb2RlLCBjaGFyYWN0ZXJzcmMsIGZvbGxvdykgPT4ge1xuICAgIGRpYWxvZ3Vlcy5wdXNoKHtcbiAgICAgICAgdGV4dCxcbiAgICAgICAgY29kZSxcbiAgICAgICAgY2hhcmFjdGVyc3JjLFxuICAgICAgICBmb2xsb3dcbiAgICB9KVxufVxuXG5jb25zdCBjcmVhdGVEaWFsb2d1ZSA9IChkaWFsb2d1ZU9iaikgPT4ge1xuICAgIGNvbnN0IGRpYWxvZ3VlID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgICAgICBhZGRDbGFzcyhkaWFsb2d1ZSwgW1wiZGlhbG9ndWVcIiwgXCJkaWFsb2d1ZS1zdGFydC1lbmRcIl0pO1xuICAgICAgICBhdHRyaWJzKGRpYWxvZ3VlLCBbXCJpZFwiLCBcImRyYWdnYWJsZVwiXSwgW2BkaWFsb2d1ZS0ke2RpYWxvZ3VlT2JqLmNvZGV9YCwgXCJmYWxzZVwiXSlcblxuICAgICAgICAvL21ha2UgcHJvbXB0IGluZGV4IHN5c3RlbSBwbHNwcm9tcHRcbiAgICAgICAgc3R5bGUoZGlhbG9ndWUsIGBcbiAgICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogc2xhdGVncmF5O1xuICAgICAgICAgICAgYm9yZGVyOiA1cHggc29saWQgZGFya3NsYXRlZ3JheTtcbiAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC4xcztcbiAgICAgICAgICAgIHdpZHRoOiA0MDBweDtcbiAgICAgICAgICAgIGhlaWdodDogMTAwcHg7XG4gICAgICAgICAgICBsZWZ0OiBjYWxjKDUwJSAtMjAwcHgpO1xuICAgICAgICAgICAgdG9wOiA0MDBweDtcbiAgICAgICAgICAgIGRpc3BsYXk6ZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgICBnYXA6IDEwcHg7XG4gICAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBgKTtcblxuICAgICAgICByZW5kZXIoZGlhbG9ndWUsIGNyZWF0ZUNoYXJCb3goZGlhbG9ndWVPYmouY2hhcmFjdGVyc3JjKSlcbiAgICAgICAgcmVuZGVyKGRpYWxvZ3VlLCBjcmVhdGVUZXh0KGRpYWxvZ3VlT2JqLnRleHQpKTtcbiAgICAgICAgcmVuZGVyKGZpbmQoXCIuZ2FtZVwiKSwgZGlhbG9ndWUpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiBkaWFsb2d1ZS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlhbG9ndWUtc3RhcnQtZW5kXCIpLCAxMDApO1xuICAgICAgICByZXR1cm4gZGlhbG9ndWU7XG59XG5cbmNvbnN0IGNyZWF0ZUNoYXJCb3ggPSAoY2hhcnNyYykgPT4ge1xuICAgIGNvbnN0IGNoYXJCb3ggPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoY2hhckJveCwgW1wiY2hhckJveFwiXSlcbiAgICBzdHlsZShjaGFyQm94LCBgXG4gICAgICAgIGJvcmRlcjogNXB4IHNvbGlkIGRhcmtzbGF0ZWdyYXk7XG4gICAgICAgIHdpZHRoOiA2NHB4O1xuICAgICAgICBoZWlnaHQ6IDY0cHg7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybCgke2NoYXJzcmN9KSAwIDA7XG4gICAgYClcbiAgICByZXR1cm4oY2hhckJveCk7XG59XG5cbmNvbnN0IGNyZWF0ZVRleHQgPSAobXl0ZXh0KSA9PntcbiAgICBjb25zdCB0ZXh0ID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgICAgICBzdHlsZSh0ZXh0LCBgXG4gICAgICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnbXVucm8nO1xuICAgICAgICAgICAgZm9udC1zaXplOiAyNXB4O1xuICAgICAgICBgKTtcbiAgICB3cml0ZSh0ZXh0LCBteXRleHQpO1xuXG4gICAgcmV0dXJuIHRleHQ7XG59XG5cbmNvbnN0IGluaXREaWFsb2d1ZXMgPSAoKSA9PiB7XG4gICAgZGlhbG9ndWVPYmooXCJtYW5cIiwgMCwgc2hhZG93LCB0cnVlKTtcbiAgICBkaWFsb2d1ZU9iaihcImxpZmUgY2FuIGJlIHRvdWdoXCIsIDEsIHNoYWRvdywgZmFsc2UpO1xuICAgIGRpYWxvZ3VlT2JqKFwieW91IGFpbnQgaGFsZiBiYWQgYnJvXCIsIDIsIHNoYWRvdywgZmFsc2UpO1xufVxuXG5leHBvcnQge2luaXREaWFsb2d1ZXMsIG5leHREaWFsb2d1ZX07IiwiaW1wb3J0IHsgbmV4dERpYWxvZ3VlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZGlhbG9ndWVcIjtcbmltcG9ydCB7IHRvZ2dsZVByb21wdCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb21wdHNcIjtcbmltcG9ydCB7IHN0eWxlIH0gZnJvbSBcIi4vUW9MXCI7XG5pbXBvcnQgZXBpYyBmcm9tIFwiLi4vc291bmRzL2VwaWNfYmF0dGxlX29mX2ZhbnRhc2llcy5tcDNcIlxuXG5jb25zdCB0cmlnZ2VyID0gKGNvZGUpID0+IHtcbiAgICBzd2l0Y2ggKGNvZGUpe1xuICAgICAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgICAgICAgIHRvZ2dsZVByb21wdChcInR1dG9yaWFsXCIpO1xuICAgICAgICAgICAgbmV4dERpYWxvZ3VlKDApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ3aW5cIjpcbiAgICAgICAgICAgIHRvZ2dsZVByb21wdChcIndpblwiKTtcbiAgICAgICAgICAgIHN0eWxlKGRvY3VtZW50LmJvZHksIGBcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0NzYzMzY7XG4gICAgICAgICAgICBgKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufVxuXG5leHBvcnQge3RyaWdnZXJ9OyIsImltcG9ydCB7cmVuZGVyLCBjcmVhdGUsIGFkZENsYXNzLCBoYXNDbGFzcywgcmVtQ2xhc3MsIGZpbmQsIHdyaXRlLCBkZXRlY3QsIHN0eWxlLCBhdHRyaWJzfSBmcm9tIFwiLi9Rb0xcIlxuaW1wb3J0IHsgZ2V0VGlsZXMsIG1vZGlmeVRpbGUgfSBmcm9tIFwiLi9jYW52YXNGdW5jc1wiO1xuXG5jb25zdCBpbml0TW91c2UgPSAoY2FudikgPT4ge1xuICAgIGRldGVjdChjYW52LCBcImNsaWNrXCIsIChldnQpID0+IHtcbiAgICAgICAgY29uc3QgY3R4ID0gY2Fudi5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGNvbnN0IG1vdXNlUG9zID0gZ2V0TW91c2VQb3MoY2FudiwgZXZ0KTtcbiAgICAgICAgaWYgKGhhc0NsYXNzKGNhbnYsIFwibGF5ZXItMVwiKSl7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ2hhbmdlKGN0eCwgbW91c2VQb3MpXG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TW91c2VQb3MoY2FudmFzLCBldnQpIHtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IGV2dC5jbGllbnRYIC0gcmVjdC5sZWZ0LFxuICAgICAgICB5OiBldnQuY2xpZW50WSAtIHJlY3QudG9wXG4gICAgfTtcbn1cblxuY29uc3QgYmFja2dyb3VuZENoYW5nZSA9IChjdHgsIG1vdXNlKSA9PiB7XG4gICAgY29uc3QgdGlsZXggPSBNYXRoLmZsb29yKG1vdXNlLngvNjQpXG4gICAgY29uc3QgdGlsZXkgPSBNYXRoLmZsb29yKG1vdXNlLnkvNjQpXG5cbiAgICBsZXQgdGlsZXMgPSBnZXRUaWxlcygpO1xuICAgIGxldCB0aWxlID0gdGlsZXNbdGlsZXhdW3RpbGV5XTtcbiAgICB0aWxlKys7XG4gICAgaWYgKHRpbGU9PTIwKXtcbiAgICAgICAgdGlsZSA9IDA7XG4gICAgfVxuICAgIG1vZGlmeVRpbGUodGlsZXgsdGlsZXksdGlsZSk7XG59XG5cbmV4cG9ydCB7aW5pdE1vdXNlLCBnZXRNb3VzZVBvcywgYmFja2dyb3VuZENoYW5nZX07IiwiaW1wb3J0IHtyZW5kZXIsIGNyZWF0ZSwgYWRkQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCB3cml0ZSwgZGV0ZWN0LCBzdHlsZSwgYXR0cmlic30gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcbmltcG9ydCB7IGFuaW1hdGVTQ3MgfSBmcm9tIFwiLi4vc2NyaXB0cy9TQ0Z1bmNzXCI7XG5pbXBvcnQgeyBpbml0TW91c2UgfSBmcm9tIFwiLi4vc2NyaXB0cy9jYW52TW91c2VGdW5jc1wiO1xuaW1wb3J0IHtpbml0QmFja2dyb3VuZCwgdXBkYXRlQmFja2dyb3VuZCwgY2xlYXJ9IGZyb20gXCIuLi9zY3JpcHRzL2NhbnZhc0Z1bmNzXCI7XG5cbmxldCBzdG9wID0gZmFsc2U7XG5sZXQgZnJhbWVzID0gMDtcbmNvbnN0IGZwcyA9IDMwXG5jb25zdCBtc1BlckZyYW1lID0gMTAwMCAvIGZwc1xubGV0IG1zUHJldiA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuXG5jb25zdCBjYW52YXMgPSAod2lkdGgsIGhlaWdodCwgbGF5ZXIpID0+IHtcbiAgICBjb25zdCBjYW52ID0gY3JlYXRlKFwiY2FudmFzXCIpO1xuICAgIGFkZENsYXNzKGNhbnYsIFtcImdhbWUtY2FudmFzXCIsIGBsYXllci0ke2xheWVyfWBdKTtcbiAgICBhdHRyaWJzKGNhbnYsIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCJdLCBbYCR7d2lkdGh9cHhgLGAke2hlaWdodH1weGBdKTtcblxuICAgIHN0eWxlKGNhbnYsIGBcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgYCk7XG4gICAgY29uc3QgY3R4ID0gY2Fudi5nZXRDb250ZXh0KFwiMmRcIik7XG5cbiAgICBpbml0TW91c2UoY2Fudik7XG4gICAgXG4gICAgaWYgKGxheWVyPT09MClcbiAgICB7XG4gICAgICAgIGluaXRCYWNrZ3JvdW5kKGN0eCwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbnY7XG59XG5cbmZ1bmN0aW9uIHJ1bkV2ZXJ5dGhpbmcoY2FudmFzTGlzdCwgd2lkdGgsIGhlaWdodCl7XG4gICAgY29uc3QgYW5pbWF0ZUV2ZXJ5dGhpbmcgPSAoKSA9PiB7XG5cbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlRXZlcnl0aGluZyk7XG5cbiAgICAgICAgY29uc3QgbXNOb3cgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIGNvbnN0IG1zUGFzc2VkID0gbXNOb3cgLSBtc1ByZXY7XG5cbiAgICAgICAgaWYgKG1zUGFzc2VkIDwgbXNQZXJGcmFtZSkgcmV0dXJuXG5cbiAgICAgICAgY29uc3QgZXhjZXNzVGltZSA9IG1zUGFzc2VkICUgbXNQZXJGcmFtZVxuICAgICAgICBtc1ByZXYgPSBtc05vdyAtIGV4Y2Vzc1RpbWVcblxuICAgICAgICAvLyBQdXQgeW91ciBkcmF3aW5nIGNvZGUgaGVyZVxuICAgICAgICBjYW52YXNMaXN0Lm1hcCgoY2FudmFzLGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgLy9jbGVhcihjdHgsIHdpZHRoLCBoZWlnaHQpXG4gICAgICAgICAgICBmcmFtZXMrKztcbiAgICAgICAgICAgIGlmIChpbmRleD09PTApe1xuICAgICAgICAgICAgICAgIHVwZGF0ZUJhY2tncm91bmQoY3R4LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAvL2ltcGxlbWVudCBzb21ld2F5IHNvIHRoYXQgaXQgd29udCB1cGRhdGUgdW5sZXNzIHRoZXJlIGlzIGEgY2hhbmdlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGFuaW1hdGVTQ3MoKTtcbiAgICBcbiAgICB9XG5cbiAgICBhbmltYXRlRXZlcnl0aGluZygpO1xufVxuXG5cblxuZXhwb3J0IHtjYW52YXMsIHJ1bkV2ZXJ5dGhpbmd9IiwiaW1wb3J0IHtyZW5kZXIsIGNyZWF0ZSwgYWRkQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCB3cml0ZSwgZGV0ZWN0LHN0eWxlfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuXG5jb25zdCB3cmFwcGVyID0gKCkgPT57ICAgXG4gICAgY29uc3QgcmFwcGVyID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKHJhcHBlciwgW1wid3JhcHBlclwiXSk7XG4gICAgc3R5bGUocmFwcGVyLGBcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGxlZnQ6IC0zMjBweDtcbiAgICBgKVxuICAgIHJlbmRlcihkb2N1bWVudC5ib2R5LCByYXBwZXIpO1xuICAgIHJldHVybiByYXBwZXI7XG59XG5cbmNvbnN0IG1pbmlXcmFwcGVyID0gKCkgPT57XG4gICAgY29uc3QgcmFwcGVyID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKHJhcHBlciwgW1wibWluaS13cmFwcGVyXCJdKTtcbiAgICBzdHlsZShyYXBwZXIsYFxuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDAwMDtcbiAgICAgICAgdG9wOiA2NTBweDtcbiAgICAgICAgd2lkdGg6IDY0MHB4O1xuICAgICAgICBkaXNwbGF5OmZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDsgXG4gICAgICAgIGhlaWdodDo2NHB4O1xuICAgICAgICBhbGlnbi1pdGVtczpjZW50ZXI7XG4gICAgYClcbiAgICByZW5kZXIoZG9jdW1lbnQuYm9keSwgcmFwcGVyKTtcbiAgICByZXR1cm4gcmFwcGVyO1xufVxuXG5leHBvcnQge3dyYXBwZXIsIG1pbmlXcmFwcGVyfTsiLCJpbXBvcnQge3JlbmRlciwgcmVtb3ZlLCBjcmVhdGUsIGFkZENsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlLCBhdHRyaWJzfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuaW1wb3J0IENhbiBmcm9tIFwiLi4vaW1hZ2VzL2Nhbi5wbmdcIlxuaW1wb3J0IENvaW4gZnJvbSBcIi4uL2ltYWdlcy9jb2luLnBuZ1wiXG5pbXBvcnQgZGVjb3IgZnJvbSBcIi4uL2ltYWdlcy9kZWNvci5wbmdcIlxuaW1wb3J0IHsgYmFja2dyb3VuZENoYW5nZSB9IGZyb20gXCIuLi9zY3JpcHRzL2NhbnZNb3VzZUZ1bmNzXCI7XG5pbXBvcnQgeyBzcHJpdGVDYW52YXMgfSBmcm9tIFwiLi9zcHJpdGVjYW52YXNcIjtcbmltcG9ydCB7IGRpc3BsYXlJbmZvIH0gZnJvbSBcIi4vaW5mb1NjcmVlblwiO1xuXG5sZXQgbWluaUxpc3QgPSBbXTtcblxuZnVuY3Rpb24gbWluaUNhbnZhcyhuYW1lLCBpbWcsIGltZ3NyYyl7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnNpemUgPSA2NDtcbiAgICB0aGlzLmltZyA9IGltZztcbiAgICB0aGlzLmltZ3NyYyA9IGltZ3NyYztcbiAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7XG4gICAgdGhpcy5jYW52ZWxlO1xuICAgIHRoaXMuaW1nZWxlO1xuXG4gICAgdGhpcy5pbml0ID0gKGluZGV4KSA9PntcbiAgICAgICAgdGhpcy5hZGRlZGxlZnQgPSBtaW5pTGlzdC5sZW5ndGgqNjQ7XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3QgY2FudiA9IGNyZWF0ZShcImNhbnZhc1wiKTtcbiAgICAgICAgYWRkQ2xhc3MoY2FudiwgW1wibWluaS1jYW52YXNcIiwgYCR7bmFtZX1gXSk7XG4gICAgICAgIGF0dHJpYnMoY2FudiwgW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0sIFtgJHtzaXplfXB4YCxgJHtzaXplfXB4YF0pO1xuXG5cbiAgICAgICAgc3R5bGUoY2FudiwgYFxuICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgICBtYXJnaW46IDUgYXV0bztcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOm5vbmU7XG4gICAgICAgIGApO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY29uc3QgaW1nID0gdGhpcy5pbWc7XG4gICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwwLHNpemUsc2l6ZSk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCwgc2l6ZSwgc2l6ZSwgMCwgMCwgc2l6ZSxzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FudmVsZSA9IGNhbnY7XG4gICAgICAgIHRoaXMuY3R4ID0gY3R4O1xuXG4gICAgICAgIGNvbnN0IGltZ2VsZSA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICAgICAgYWRkQ2xhc3MoaW1nZWxlLCBbXCJjYW52YXMtaWNvblwiXSlcbiAgICAgICAgaW1nZWxlLmlkID0gbmFtZTtcbiAgICAgICAgc3R5bGUoaW1nZWxlLCBgXG4gICAgICAgICAgICB3aWR0aDogNjRweDtcbiAgICAgICAgICAgIGhlaWdodDogNjRweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVybCgke3RoaXMuaW1nc3JjfSkgLTY0cHggMCwgdXJsKCR7ZGVjb3J9KTtcbiAgICAgICAgYClcbiAgICAgICAgdGhpcy5pbWdlbGUgPSBpbWdlbGU7XG5cbiAgICAgICAgdGhpcy5pbml0TW91c2UoY2FudiwgaW1nZWxlKTtcblxuICAgICAgICByZXR1cm4gaW1nZWxlO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdE1vdXNlID0gKGNhbnYsIGltZ2VsZSkgPT4ge1xuICAgICAgICBjb25zdCBjdHggPSBjYW52LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgbGV0IG1vdXNlUG9zO1xuICAgICAgICBjb25zdCBiYWNrY2FudiA9IGZpbmQoXCIubGF5ZXItMVwiKTtcbiAgICAgICAgbGV0IGludGVydmFsX2xpc3QgPSBbXTtcbiAgICAgICAgbGV0IG1vdXNlUG9zMjtcbiAgICAgICAgbGV0IHNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIGxldCBjdXJGcmEgPSB0aGlzLmN1cnJlbnRGcmFtZTtcblxuICAgICAgICBjb25zdCBob3ZlckZ1bmMgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWxfbGlzdC5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgIGludGVydmFsX2xpc3QucHVzaChzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGN1ckZyYSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID09PSBcImNhblwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDaGFuZ2UoY3R4LCBtb3VzZVBvczIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VyRnJhID09PSAxNCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyRnJhID0gMTBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLm5hbWUgPT09IFwiY29pblwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1ckZyYSA9PT0gMTIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZyYSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gdGhpcy5pbWc7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwwLHNpemUsc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBjdXJGcmEqc2l6ZSwgMCwgc2l6ZSwgc2l6ZSwgMCwgMCwgc2l6ZSxzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSBjdXJGcmE7XG4gICAgICAgICAgICAgICAgfSwgMjUwKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cGRhdGVEcmFnID0gKGV2dCkgPT57XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgY29uc3QgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCByZWN0MiA9IGJhY2tjYW52LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgbW91c2VQb3MyID0ge1xuICAgICAgICAgICAgICAgIHg6IGV2dC5jbGllbnRYIC0gcmVjdDIubGVmdCxcbiAgICAgICAgICAgICAgICB5OiBldnQuY2xpZW50WSAtIHJlY3QyLnRvcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vdXNlUG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IGV2dC5jbGllbnRYIC0gcmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgIHk6IGV2dC5jbGllbnRZIC0gcmVjdC50b3BcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2Fudi5zdHlsZS50b3AgPSBtb3VzZVBvcy55IC0zMiArXCJweFwiO1xuICAgICAgICAgICAgY2Fudi5zdHlsZS5sZWZ0ID0gbW91c2VQb3MueCAtMzIgKyBcInB4XCI7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1vdXNlRG93bkZ1bmMgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBsZXQgY3VyRnJhID0gdGhpcy5jdXJyZW50RnJhbWU7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTsgIFxuICAgICAgICAgICAgY2Fudi5zdHlsZS50b3AgPVwiLTEwMDBweFwiO1xuICAgICAgICAgICAgY2Fudi5zdHlsZS5sZWZ0ID0gXCItMTAwMHB4XCI7XG4gICAgICAgICAgICByZW5kZXIoZG9jdW1lbnQuYm9keSxjYW52KTtcbiAgICAgICAgICAgIGRldGVjdChkb2N1bWVudC5ib2R5LCBcIm1vdXNlbW92ZVwiLCB1cGRhdGVEcmFnKVxuICAgICAgICAgICAgZGV0ZWN0KGJhY2tjYW52LCBcIm1vdXNlZW50ZXJcIiwgaG92ZXJGdW5jKVxuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsc2l6ZSxzaXplKTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBjdXJGcmEqc2l6ZSwgMCwgc2l6ZSwgc2l6ZSwgMCwgMCwgc2l6ZSxzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1vdXNlVXBGdW5jID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgdW5kZXRlY3QoZG9jdW1lbnQuYm9keSwgXCJtb3VzZW1vdmVcIiwgdXBkYXRlRHJhZylcbiAgICAgICAgICAgIHVuZGV0ZWN0KGJhY2tjYW52LCBcIm1vdXNlZW50ZXJcIiwgaG92ZXJGdW5jKVxuICAgICAgICAgICAgaWYgKGludGVydmFsX2xpc3QubGVuZ3RoIT09MCl7XG4gICAgICAgICAgICAgICAgaWYobmFtZSA9PT0gXCJjb2luXCIpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2luID0gc3ByaXRlQ2FudmFzKGZpbmQoXCIud3JhcHBlclwiKSwgXCJjb2luXCIsIDY0LCBDb2luLCBtb3VzZVBvczIueC0zMiwgbW91c2VQb3MyLnktMzIsIDAsIHRydWUsIDEyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxfbGlzdFswXSk7XG4gICAgICAgICAgICBpbnRlcnZhbF9saXN0ID0gW107XG4gICAgICAgICAgICBjb25zdCBoYXNDaGlsZCA9IGZpbmQoYC5taW5pLWNhbnZhcy4ke3RoaXMubmFtZX1gKSAhPSBudWxsO1xuICAgICAgICAgICAgaWYgKGhhc0NoaWxkKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKGRvY3VtZW50LmJvZHksIGNhbnYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLDAsc2l6ZSxzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVwZGF0ZUluZm8gPSAoZXZ0KSA9PntcbiAgICAgICAgICAgIGRpc3BsYXlJbmZvKGV2dC50YXJnZXQuaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGV0ZWN0KGltZ2VsZSwgXCJtb3VzZWRvd25cIiwgbW91c2VEb3duRnVuYyk7XG4gICAgICAgIGRldGVjdChkb2N1bWVudC5ib2R5LCBcIm1vdXNldXBcIiwgbW91c2VVcEZ1bmMpO1xuICAgICAgICBkZXRlY3QoaW1nZWxlLCBcIm1vdXNlZW50ZXJcIiwgdXBkYXRlSW5mbylcbiAgICB9ICAgICAgIFxufVxuXG5jb25zdCBpbml0TWluaSA9IChuYW1lLCBpbWdzcmMpID0+IHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgIGltZy5zcmMgPSBpbWdzcmM7XG4gICAgY29uc3QgbWluaSA9IG5ldyBtaW5pQ2FudmFzKG5hbWUsIGltZywgaW1nc3JjKVxuICAgIGNvbnN0IG1pbmllbGUgPSBtaW5pLmluaXQobWluaUxpc3QubGVuZ3RoKTtcbiAgICBtaW5pTGlzdC5wdXNoKG1pbmkpO1xuICAgIHJldHVybiBtaW5pZWxlO1xufVxuXG5jb25zdCBpbml0TWluaXMgPSAobWluaVdyYXBwZXIpID0+IHtcbiAgICByZW5kZXIobWluaVdyYXBwZXIsIGluaXRNaW5pKFwiY2FuXCIsIENhbikpXG4gICAgcmVuZGVyKG1pbmlXcmFwcGVyLCBpbml0TWluaShcImNvaW5cIiwgQ29pbikpXG59XG5cbmV4cG9ydCB7aW5pdE1pbmlzfSIsImltcG9ydCB7cmVuZGVyLCByZW1vdmUsIGNyZWF0ZSwgYWRkQ2xhc3MsIGhhc0NsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlLCBhdHRyaWJzfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuXG5jb25zdCBpbml0SW5mb1NjcmVlbiA9ICgpID0+e1xuICAgIGNvbnN0IGluZm8gPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoaW5mbywgW1wiaW5mb1NjcmVlblwiXSk7XG4gICAgc3R5bGUoaW5mbywgYFxuICAgICAgICB3aWR0aDogMjUwcHg7XG4gICAgICAgIGhlaWdodDogNjQwcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyNDI0MjQ7XG4gICAgICAgIGJvcmRlcjogNXB4IHNvbGlkICMzMmI3ZDE7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogNjUwcHg7XG4gICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICBmb250LWZhbWlseTptdW5ybztcbiAgICBgKVxuXG4gICAgcmVuZGVyKGZpbmQoXCIud3JhcHBlclwiKSwgaW5mbyk7XG59XG5cbmNvbnN0IGRpc3BsYXlJbmZvID0gKGNvZGUpID0+IHtcbiAgICBjb25zdCBpbmZvID0gZmluZChcIi5pbmZvU2NyZWVuXCIpO1xuICAgIGlmIChjb2RlID09PSBcImNhblwiKXtcbiAgICAgICAgd3JpdGUoaW5mbyxcInRoZSBjYW4gaXMgZm9yIHdhdGVyXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlID09PSBcImNvaW5cIil7XG4gICAgICAgIHdyaXRlKGluZm8sIFwidGhlIGNvaW4gaXMgZm9yIGNhciBzb21laG93XCIpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtpbml0SW5mb1NjcmVlbiwgZGlzcGxheUluZm99OyIsImltcG9ydCB7cmVuZGVyLCByZW1vdmUsIGNyZWF0ZSwgYWRkQ2xhc3MsIGhhc0NsYXNzLCByZW1DbGFzcywgZmluZCwgZmluZEFsbCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlLCBhdHRyaWJzfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuXG5jb25zdCByZW5kZXJTaGFkZXIgPSAobmFtZSkgPT4ge1xuICAgIGNvbnN0IHNoYWQgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3Moc2hhZCwgW1wic2hhZGVyXCJdKTtcbiAgICBzaGFkLmlkID0gbmFtZTtcbiAgICBsZXQgZXh0cmFfc3R5bGU7XG4gICAgaWYgKG5hbWUgPT09IFwibGlnaHQtc2hhZGVyXCIpe1xuICAgICAgICBleHRyYV9zdHlsZSA9IGBcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIHJnYmEoMjI3LCAyNDUsIDY2LCAwLjMpLCByZ2JhKDIzMCwgMjAxLCAxNDcsIDAuMSkpO1xuICAgICAgICBgXG4gICAgfVxuICAgIGVsc2UgaWYobmFtZSA9PT0gXCJkYXJrLXNoYWRlclwiKXtcbiAgICAgICAgZXh0cmFfc3R5bGUgPSBgXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCByZ2JhKDU0LCA4OCwgMTYzLCAwLjMpLCByZ2JhKDkwLCA3NiwgMTE1LCAwLjYpKTtcbiAgICAgICAgYFxuICAgIH1cblxuICAgIHN0eWxlKHNoYWQsIGBcbiAgICAgICAgaGVpZ2h0OjY0MHB4O1xuICAgICAgICB3aWR0aDogNjQwcHg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgJHtleHRyYV9zdHlsZX1cbiAgICBgKTtcblxuICAgIHJlbmRlcihmaW5kKFwiLnNoYWR3cmFwXCIpLCBzaGFkKTtcbn1cblxuY29uc3QgcmVuZGVyTGV2ZWwgPSAobmFtZSkgPT57XG4gICAgY29uc3Qgc2hhZCA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhzaGFkLCBbXCJsZXZlbFwiLCBcInNoYWRlclwiXSk7XG4gICAgc2hhZC5pZCA9IG5hbWU7XG4gICAgXG4gICAgc3R5bGUoc2hhZCwgYFxuICAgICAgICBoZWlnaHQ6NjQwcHg7XG4gICAgICAgIHdpZHRoOiA2NDBweDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGApO1xuXG4gICAgaWYgKG5hbWUgPT09IFwibGV2ZWwtMVwiKXtcbiAgICAgICAgcmVuZGVyKHNoYWQsIHBhdGhCbG9jaygwLCAyNTYsIDY0MCwgNjQpKTtcbiAgICB9XG4gICAgZWxzZSBpZihuYW1lID09PSBcImxldmVsLTJcIil7XG4gICAgICAgIHJlbmRlcihzaGFkLCBwYXRoQmxvY2soMCwgMTI4LCA2NDAsIDY0KSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKGZpbmQoXCIuc2hhZHdyYXBcIiksIHNoYWQpO1xufVxuXG5jb25zdCByZW1vdmVTaGFkZXJzID0gKCkgPT57XG4gICAgY29uc3Qgc2hhZGxpc3QgPSBmaW5kQWxsKFwiLnNoYWRlclwiKTtcbiAgICBjb25zdCBzaGFkd3JhcCA9IGZpbmQoXCIuc2hhZHdyYXBcIik7XG5cbiAgICBzaGFkbGlzdC5mb3JFYWNoKHNoYWQgPT4ge3JlbW92ZShzaGFkd3JhcCxzaGFkKX0pOyAgICBcbn1cblxuY29uc3QgcGF0aEJsb2NrID0gKHgseSx3aWR0aCxoZWlnaHQpID0+IHtcbiAgICBjb25zdCBwYXRoID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKHBhdGgsIFtcInBhdGhibG9ja1wiXSk7XG4gICAgc3R5bGUocGF0aCwgYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0NSwgNjYsIDY2LCAwLjUpO1xuICAgICAgICBsZWZ0OiAke3h9cHg7XG4gICAgICAgIHRvcDogJHt5fXB4O1xuICAgICAgICBoZWlnaHQ6ICR7aGVpZ2h0fXB4O1xuICAgICAgICB3aWR0aDogJHt3aWR0aH1weDtcbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgYClcblxuICAgIHJldHVybiBwYXRoO1xufVxuXG5jb25zdCBpbml0U2hhZGVycyA9ICh3cmFwcGVyKSA9PiB7XG4gICAgY29uc3Qgc2hhZHdyYXAgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3Moc2hhZHdyYXAsIFtcInNoYWR3cmFwXCJdKTtcbiAgICBzdHlsZShzaGFkd3JhcCwgYFxuICAgICAgICBoZWlnaHQ6NjQwcHg7XG4gICAgICAgIHdpZHRoOiA2NDBweDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGApO1xuXG4gICAgcmVuZGVyKHdyYXBwZXIsIHNoYWR3cmFwKTtcbn1cblxuZXhwb3J0IHtpbml0U2hhZGVycywgcmVuZGVyU2hhZGVyLCByZW5kZXJMZXZlbCwgcmVtb3ZlU2hhZGVyc30iLCJpbXBvcnQge3JlbmRlciwgcmVtb3ZlLCBjcmVhdGUsIGFkZENsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlLCBoYXNDbGFzc30gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcbmltcG9ydCBidXR0b25zIGZyb20gXCIuLi9pbWFnZXMvQnV0dG9uc191cGRhdGVkLnBuZ1wiXG5pbXBvcnQgeyB0b2dnbGVQcm9tcHQgfSBmcm9tIFwiLi9wcm9tcHRzXCI7XG5pbXBvcnQgeyBjb2luX2xpc3QsIGRlc3Ryb3lTQywgZHJhd1NDLCBtb3ZlVG93YXJkcywgc2V0U2hvdywgdGVsZXBvcnQgfSBmcm9tIFwiLi9zcHJpdGVjYW52YXNcIjtcbmltcG9ydCB7IHJlbmRlclNoYWRlciwgcmVtb3ZlU2hhZGVycywgcmVuZGVyTGV2ZWwgfSBmcm9tIFwiLi9zaGFkZXJzXCI7XG5cbmNvbnN0IGJ1dFNpemUgPSAzMjtcbmxldCBidXRPdjtcbmxldCBwb2ludGVyID0gZmFsc2U7XG5sZXQgcG9pbnRUaW1lID0gW107XG5sZXQgYmcgPSAtMTtcblxuY29uc3QgYnV0dG9uT3ZlcmxheSA9ICh3aWR0aCwgaGVpZ2h0KSA9PntcbiAgICBidXRPdiA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhidXRPdiwgWydidXR0b24tb3ZlcmxheSddKTtcbiAgICBzdHlsZShidXRPdiwgYFxuICAgICAgICBtaW4taGVpZ2h0OiAke2hlaWdodH07XG4gICAgICAgIG1pbi13aWR0aDogJHt3aWR0aH07XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBgKVxuXG4gICAgZ2VuZXJhdGVCdXR0b25zKGJ1dE92KTtcblxuICAgIHJldHVybiBidXRPdjtcbn1cblxuY29uc3QgZ2VuZXJhdGVCdXR0b25zID0gKGJ1dE92KSA9PiB7XG4gICAgcmVuZGVyKGJ1dE92LCBCdXR0b24oXCJwcm9tcHRidXQtMVwiLCAyLCB0b2dnbGVQcm9tcHQsIDE2LCAxNikpXG4gICAgcmVuZGVyKGJ1dE92LCBCdXR0b24oXCJzaGFrZXJcIiwgMywgdG9nZ2xlU2hha2UsIDE2LCA4MCkpXG4gICAgcmVuZGVyKGJ1dE92LCBCdXR0b24oXCJwb2ludGVyXCIsIDcsIHRvZ2dsZVBvaW50ZXIsIDE2LCAxNDQpKVxuICAgIHJlbmRlcihidXRPdiwgQnV0dG9uKFwiY2hhbmdlYmdcIiwgOCwgY2hhbmdlQmFja2dyb3VuZCwgMTYsIDIwOCkpXG59XG5cbmNvbnN0IEJ1dHRvbiA9IChuYW1lLCBzcHJpdGVudW0sIGZ1bmMsIHgsIHkpID0+e1xuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhidXR0b24sIFtcImJ1dHRvblwiLCBuYW1lXSk7XG4gICAgYnV0dG9uLmlkID0gbmFtZTtcbiAgICAgICAgc3R5bGUoYnV0dG9uLCBgXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICBsZWZ0OiR7eH1weDtcbiAgICAgICAgICAgIHRvcDogJHt5fXB4O1xuICAgICAgICAgICAgd2lkdGg6ICR7YnV0U2l6ZX1weDtcbiAgICAgICAgICAgIGhlaWdodDogJHtidXRTaXplfXB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdXJsKCR7YnV0dG9uc30pIC0ke3Nwcml0ZW51bSpidXRTaXplfXB4IDA7XG4gICAgICAgIGApO1xuXG4gICAgZGV0ZWN0KGJ1dHRvbiwgXCJjbGlja1wiLCBmdW5jKTtcbiAgICBcbiAgICByZXR1cm4gYnV0dG9uO1xufVxuXG5jb25zdCB0b2dnbGVTaGFrZSA9IChlKSA9PiB7XG4gICAgY29uc3QgcHJvbXB0YnV0ID0gZmluZChcIiNwcm9tcHRidXQtMVwiKTtcbiAgICBpZiAoaGFzQ2xhc3MocHJvbXB0YnV0LCBcInZpYnJhdGVcIikpe1xuICAgICAgICByZW1DbGFzcyhwcm9tcHRidXQsIFtcInZpYnJhdGVcIl0pO1xuICAgIH1cbiAgICBzZXRUaW1lb3V0KCgpID0+IGFkZENsYXNzKHByb21wdGJ1dCwgW1widmlicmF0ZVwiXSksIDEwMCk7XG5cbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSBjb2luX2xpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgZGVzdHJveVNDKGNvaW5fbGlzdFtpXSk7XG4gICAgfVxufVxuXG5jb25zdCBjaGFuZ2VCYWNrZ3JvdW5kID0gKGUpID0+IHtcbiAgICBiZyArPSAxO1xuICAgIGlmIChiZyA9PT0gMikge1xuICAgICAgICBiZyA9IC0xO1xuICAgICAgICByZW1vdmVTaGFkZXJzKCk7XG4gICAgfVxuICAgIC8qXG4gICAgY29uc3QgY2FudiA9IGZpbmQoXCIubGF5ZXItMVwiKTtcbiAgICBjb25zdCBjdHggPSBjYW52LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBjb25zdCBzaXplID0gMTYwO1xuICAgIGlmIChiZyAhPT0gLTEpe1xuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLnNyYyA9IGJhY2tncm91bmQ7XG4gICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAxNjAqYmcsIDAsIHNpemUsIHNpemUsIDAsIDAsIDY0MCw2NDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgY3R4LmNsZWFyUmVjdCgwLDAsNjQwLDY0MCk7XG4gICAgKi9cbiAgICBpZiAoYmcgPT09IDApIHtcbiAgICAgICAgcmVuZGVyU2hhZGVyKFwibGlnaHQtc2hhZGVyXCIpO1xuICAgICAgICByZW5kZXJMZXZlbChcImxldmVsLTFcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGJnID09PSAxKSB7XG4gICAgICAgIHJlbW92ZVNoYWRlcnMoKTtcbiAgICAgICAgcmVuZGVyTGV2ZWwoXCJsZXZlbC0yXCIpO1xuICAgICAgICByZW5kZXJTaGFkZXIoXCJkYXJrLXNoYWRlclwiKTtcbiAgICB9XG59XG5cbmNvbnN0IHRvZ2dsZVBvaW50ZXIgPSAoZXZ0KSA9PiB7XG4gICAgY29uc3QgYnV0ID0gZmluZChcIiNwb2ludGVyXCIpXG4gICAgY29uc3QgY2FudiA9IGZpbmQoXCIubGF5ZXItMFwiKVxuICAgIGNvbnN0IHJlY3QgPSBjYW52LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBtb3VzZVBvcyA9IHt4OjAseTowfTtcblxuICAgIGNvbnN0IHVwZGF0ZVBvaW50ZXIgPSAoZXZ0KSA9PntcbiAgICAgICAgXG4gICAgICAgIG1vdXNlUG9zID0ge1xuICAgICAgICAgICAgeDogZXZ0LmNsaWVudFggLSByZWN0LmxlZnQsXG4gICAgICAgICAgICB5OiBldnQuY2xpZW50WSAtIHJlY3QudG9wXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZVBvaW50ZXIoZXZ0KTtcblxuICAgIGlmIChwb2ludGVyKXtcbiAgICAgICAgcG9pbnRlciA9IGZhbHNlO1xuICAgICAgICByZW1DbGFzcyhidXQsIFtcInNlbGVjdGVkXCJdKTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChwb2ludFRpbWVbMF0pO1xuICAgICAgICBwb2ludFRpbWUgPSBbXTtcbiAgICAgICAgdW5kZXRlY3QoZG9jdW1lbnQsXCJtb3VzZW1vdmVcIiwgdXBkYXRlUG9pbnRlcik7XG4gICAgICAgIHNldFNob3coMSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBwb2ludGVyID0gdHJ1ZTtcbiAgICAgICAgYWRkQ2xhc3MoYnV0LCBbXCJzZWxlY3RlZFwiXSlcbiAgICAgICAgZGV0ZWN0KGRvY3VtZW50LmJvZHksXCJtb3VzZW1vdmVcIiwgdXBkYXRlUG9pbnRlcik7XG5cbiAgICAgICAgcG9pbnRUaW1lLnB1c2goc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBtb3ZlVG93YXJkcygwLCBtb3VzZVBvcy54LG1vdXNlUG9zLnkpO1xuICAgICAgICAgICAgZHJhd1NDKDEsXCJpbmNyZW1lbnRcIixcIm5vbmVcIik7XG4gICAgICAgICAgICB0ZWxlcG9ydCgxLE1hdGguZmxvb3IobW91c2VQb3MueC82NCkqNjQsIE1hdGguZmxvb3IobW91c2VQb3MueS82NCkqNjQpO1xuICAgICAgICB9LCA1MCkpO1xuICAgICAgICBzZXRTaG93KDEsIHRydWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHtidXR0b25PdmVybGF5ICx0b2dnbGVQb2ludGVyfSIsImltcG9ydCB7IGFkZENsYXNzLCBjcmVhdGUsIHJlbmRlciwgc3R5bGUgfSBmcm9tIFwiLi9zY3JpcHRzL1FvTFwiO1xuaW1wb3J0IHtpbml0Q2FudmFzZXMsIGluaXREZWJ1ZywgaW5pdE90aGVyLCBpbml0QnV0dG9uT3ZlcmxheX0gZnJvbSBcIi4vc2NyaXB0cy9zdGFydFwiO1xuaW1wb3J0IHsgdHJpZ2dlciB9IGZyb20gXCIuL3NjcmlwdHMvdHJpZ2dlcnNcIjtcblxuY29uc3QgZ2FtZSA9IGNyZWF0ZShcImRpdlwiKTtcbmFkZENsYXNzKGdhbWUsIFtcImdhbWVcIl0pO1xucmVuZGVyKGRvY3VtZW50LmJvZHksIGdhbWUpO1xuc3R5bGUoZ2FtZSwgYFxuICAgIGRpc3BsYXk6ZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjpjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OmNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczpjZW50ZXI7XG4gICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgd2lkdGg6MTAwJTtcbmApXG5cbnJlbmRlcihnYW1lLCBpbml0Q2FudmFzZXMoKSk7XG5yZW5kZXIoZ2FtZSwgaW5pdE90aGVyKCkpO1xucmVuZGVyKGdhbWUsIGluaXREZWJ1ZygpKTtcblxudHJpZ2dlcihcInN0YXJ0XCIpOyIsImltcG9ydCAnLi4vY3NzL2FuaW1hdGlvbnMuY3NzJztcbmltcG9ydCAnLi4vY3NzL2ZvbnRzLmNzcyc7XG5pbXBvcnQgcGF0dGVybiBmcm9tIFwiLi4vaW1hZ2VzL3BhdHRlcm5fMTAyLmdpZlwiXG5pbXBvcnQge3JlbmRlciwgY3JlYXRlLCBhZGRDbGFzcywgcmVtQ2xhc3MsIGZpbmQsIHdyaXRlLCBzdHlsZSwgZGV0ZWN0fSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuaW1wb3J0IHsgY2FudmFzLCBydW5FdmVyeXRoaW5nIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYW52YXMnO1xuaW1wb3J0IHsgd3JhcHBlciwgbWluaVdyYXBwZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL3dyYXBwZXInO1xuaW1wb3J0IHsgZGVidWdUb29scyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVidWdUb29scyc7XG5pbXBvcnQgeyBpbml0TWluaXMgfSBmcm9tICcuLi9jb21wb25lbnRzL21pbmlDYW52YXMnO1xuaW1wb3J0IHsgYnV0dG9uT3ZlcmxheSB9IGZyb20gJy4uL2NvbXBvbmVudHMvYnV0dG9uT3ZlcmxheSc7XG5pbXBvcnQgeyBpbml0U0MgfSBmcm9tICcuLi9jb21wb25lbnRzL3Nwcml0ZWNhbnZhcyc7XG5pbXBvcnQgeyBpbml0RGlhbG9ndWVzLCBuZXh0RGlhbG9ndWUgfSBmcm9tICcuLi9jb21wb25lbnRzL2RpYWxvZ3VlJztcbmltcG9ydCB7IGluaXRJbmZvU2NyZWVuIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbmZvU2NyZWVuJztcbmltcG9ydCB7IGluaXRBdWRpb3MgfSBmcm9tICcuL3NvdW5kcyc7XG5pbXBvcnQgeyBpbml0U2hhZGVycywgcmVuZGVyc2hhZGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9zaGFkZXJzJztcblxuY29uc3Qgd2lkdGggPSA2NDA7XG5jb25zdCBoZWlnaHQgPSA2NDA7XG5cbmNvbnN0IGluaXRDYW52YXNlcyA9ICgpID0+IHtcbiAgICBzdHlsZShkb2N1bWVudC5ib2R5LCBgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyNDI0MjQ7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiR7cGF0dGVybn1cIik7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogNzBweDtcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdDtcbiAgICBgKVxuICAgIGNvbnN0IHJhcHBlciA9IHdyYXBwZXIoKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kQ2FudmFzID0gY2FudmFzKHdpZHRoLGhlaWdodCwwKTtcbiAgICBjb25zdCBzb2xpZEJHcyA9IGNhbnZhcyh3aWR0aCxoZWlnaHQsMSk7XG4gICAgcmVuZGVyKHJhcHBlciwgYmFja2dyb3VuZENhbnZhcyk7XG4gICAgcmVuZGVyKHJhcHBlciwgc29saWRCR3MpO1xuICAgIGluaXRTQyhyYXBwZXIpO1xuICAgIGluaXRTaGFkZXJzKHJhcHBlcik7XG4gICAgY29uc29sZS5sb2coXCJjb21tZW5jaW5nXCIpO1xuICAgIHJ1bkV2ZXJ5dGhpbmcoW2JhY2tncm91bmRDYW52YXMsIHNvbGlkQkdzXSwgd2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3QgYnV0T3YgPSBidXR0b25PdmVybGF5KHdpZHRoLCBoZWlnaHQpXG4gICAgcmVuZGVyKHJhcHBlciwgYnV0T3YpO1xuICAgIHJldHVybiByYXBwZXI7XG59XG5cbmNvbnN0IGluaXRPdGhlciA9ICgpID0+IHtcbiAgICBjb25zdCBtaW5pcmFwcGVyID0gbWluaVdyYXBwZXIoKTtcbiAgICBpbml0TWluaXMobWluaXJhcHBlcik7XG4gICAgaW5pdERpYWxvZ3VlcygpO1xuICAgIGluaXRJbmZvU2NyZWVuKCk7XG4gICAgaW5pdEF1ZGlvcygpO1xuICAgIHJldHVybiBtaW5pcmFwcGVyO1xufVxuXG5jb25zdCBpbml0RGVidWcgPSAoKSA9PntcbiAgICBjb25zdCBkZWJ1Z1Rvb2wgPSBkZWJ1Z1Rvb2xzKCk7XG4gICAgcmVuZGVyKGRvY3VtZW50LmJvZHksIGRlYnVnVG9vbCk7XG4gICAgcmV0dXJuIGRlYnVnVG9vbDtcbn1cblxuZXhwb3J0IHtpbml0Q2FudmFzZXMsIGluaXRPdGhlciwgaW5pdERlYnVnfSIsImltcG9ydCB7IGluY3JlbWVudFNjb3JlLCBzY29yZSB9IGZyb20gXCIuLi9jb21wb25lbnRzL2RlYnVnVG9vbHNcIjtcbmltcG9ydCB7IHRvZ2dsZVByb21wdCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb21wdHNcIjtcbmltcG9ydCB7IGNvaW5fbGlzdCwgZGVzdHJveVNDIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc3ByaXRlY2FudmFzXCJcbmltcG9ydCB7IGZpbmQgfSBmcm9tIFwiLi9Rb0xcIjtcbmltcG9ydCB7IHBsYXlBdWRpbyB9IGZyb20gXCIuL3NvdW5kc1wiO1xuaW1wb3J0IHsgdHJpZ2dlciB9IGZyb20gXCIuL3RyaWdnZXJzXCI7XG5cbmNvbnN0IGFuaW1hdGVTQ3MgPSAoKSA9PiB7XG4gICAgY29pbl9saXN0LmZvckVhY2goY29pbiA9PiB7XG4gICAgICAgIGRyYXdPYmooY29pbiwgXCJpbmNyZW1lbnRcIiwgXCJub25lXCIpO1xuICAgICAgICBjb25zdCBvdmVybGFwID0gY2hlY2tDb2xsaXNpb24oY29pbiwgZmluZChcIiNjYXJcIikpO1xuICAgICAgICBpZiAob3ZlcmxhcCl7XG4gICAgICAgICAgICBkZXN0cm95U0MoY29pbik7XG4gICAgICAgICAgICBpbmNyZW1lbnRTY29yZSgpO1xuICAgICAgICAgICAgcGxheUF1ZGlvKFwiY29pblwiKTtcbiAgICAgICAgICAgIGlmIChzY29yZSA9PT0gMTApe1xuICAgICAgICAgICAgICAgIHRyaWdnZXIoXCJ3aW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5jb25zdCBkcmF3T2JqID0gKG9iaiwgZnJhbWUsIGRpcmVjdGlvbikgPT4ge1xuICAgIGxldCBmcmFtID0gZnJhbWU7XG4gICAgaWYgKGZyYW1lID09PSBcImluY3JlbWVudFwiKXtcbiAgICAgICAgaWYgKG9iai50aW1lciA9PT0gb2JqLnVwZGF0ZXNfcGVyX2ZyYW1lcyl7XG4gICAgICAgICAgICBmcmFtID0gb2JqLmZyYW1lICsgMTtcbiAgICAgICAgICAgIG9iai5mcmFtZSA9IGZyYW07XG4gICAgICAgICAgICBvYmoudGltZXIgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnRpbWVyICs9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZyYW0gPT09IG9iai5mcmFtZXMpe1xuICAgICAgICBpZiAob2JqLm5hbWUgPT09IFwiaGlnaGxpZ2h0XCIpIGZyYW0gPSAxO1xuICAgICAgICBlbHNlIGZyYW0gPSAwXG4gICAgICAgIG9iai5mcmFtZSA9IGZyYW07XG4gICAgfVxuICAgIGlmIChvYmoudGltZXIgPT09IDEpe1xuICAgICAgICBvYmouZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICBjb25zdCBkcmFpbmQgPSBvYmouZGlyZWN0aW9uX2RhdGFbZGlyZWN0aW9uXTtcbiAgICAgICAgb2JqLmRyYXdfaW5kZXggPSBkcmFpbmQ7XG4gICAgICAgIGNvbnN0IGN0eCA9IG9iai5lbGUuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjb25zdCBzaXplID0gb2JqLnNpemU7XG4gICAgICAgIGNvbnN0IGltZyA9IG9iai5pbWc7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwwLHNpemUsc2l6ZSk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBzaXplKmZyYW0sIHNpemUqZHJhaW5kLCBzaXplLCBzaXplLCAwLCAwLCBzaXplLHNpemUpO1xuICAgIH1cbn1cblxuY29uc3QgY2hlY2tDb2xsaXNpb24gPSAoc2MsIHRoaW5nKSA9PiB7XG4gICAgLy8gR2V0IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGZpcnN0IGVsZW1lbnQgXG4gICAgY29uc3QgcmVjdDEgPSBzYy5lbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IFxuICAgIFxuICAgIC8vIEdldCB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBzZWNvbmQgZWxlbWVudCBcbiAgICBjb25zdCByZWN0MiA9IHRoaW5nLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyBcbiAgICBcbiAgICAvLyBDaGVjayBpZiB0aGUgdHdvIGVsZW1lbnRzIG92ZXJsYXAgXG4gICAgY29uc3Qgb3ZlcmxhcCA9ICEocmVjdDEucmlnaHQgPCByZWN0Mi5sZWZ0IHx8ICBcbiAgICAgICAgICAgICAgICAgICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0IHx8ICBcbiAgICAgICAgICAgICAgICAgICAgcmVjdDEuYm90dG9tIDwgcmVjdDIudG9wIHx8ICBcbiAgICAgICAgICAgICAgICAgICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tKTsgXG5cbiAgICByZXR1cm4gb3ZlcmxhcDtcbn1cblxuZXhwb3J0IHthbmltYXRlU0NzfSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwibmMiLCJyZW5kZXIiLCJwYXJlbnQiLCJjaGlsZCIsImNyZWF0ZSIsImFkZENsYXNzIiwiY2xhc3NsaXN0IiwiZm9yRWFjaCIsImNsYXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwicmVtQ2xhc3MiLCJmaW5kIiwic2VsZWN0b3IiLCJ3cml0ZSIsInRleHQiLCJ0ZXh0Q29udGVudCIsImRldGVjdCIsImV2ZW50IiwiZnVuYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1bmRldGVjdCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdHlsZXRleHQiLCJhdHRyaWJzIiwiYXR0cmliTGlzdCIsInZhbHVlcyIsImF0dHJpYiIsImxvY2FscyIsInNjb3JlIiwiaW5jcmVtZW50U2NvcmUiLCJzY29yZWVsZSIsInNsaWRlRnVuYyIsImxlZnQiLCJ2YWx1ZSIsImF1ZGlvcyIsIm1ha2VBdWRpbyIsIm5hbWUiLCJhdWRpbyIsIkF1ZGlvIiwicGxheUF1ZGlvIiwicGxheSIsImN1cnJlbnRDb2RlIiwidG9nZ2xlUHJvbXB0IiwiY29kZSIsInByb21wdCIsImV4aXN0cyIsInNldFRpbWVvdXQiLCJjcmVhdGVQcm9tcHQiLCJteXRleHQiLCJkcmFnIiwiZHJhZ0JhciIsImNyZWF0ZVRleHQiLCJiYXIiLCJjbG9zZVByb21wdCIsIm1vdXNlRG93biIsIm1vdXNlVXAiLCJzcGxpdCIsInByZXZlbnREZWZhdWx0IiwiYm9keSIsIm1vdXNlTW92ZSIsImV2dCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtb3VzZVBvcyIsImNsaWVudFgiLCJjbGllbnRZIiwidG9wIiwidGlsZXMiLCJjb2xsaXNpb25fdGlsZXMiLCJ1cGRhdGVCYWNrZ3JvdW5kIiwiY3R4Iiwid2lkdGgiLCJoZWlnaHQiLCJyZW5kZXJUaWxlcyIsInJvdyIsInRpbGUiLCJpbmRleDIiLCJkcmF3VGlsZSIsIngiLCJ5Iiwic2l6ZSIsInRpbGVzZXQiLCJJbWFnZSIsIm9ubG9hZCIsImRyYXdJbWFnZSIsInNjX2xpc3QiLCJjb2luX2xpc3QiLCJzcHJpdGVDYW52YXMiLCJ3cmFwcGVyIiwiaW1nc3JjIiwic3BlZWQiLCJzaG93IiwiZnJhbWVzIiwiY2FudiIsImltZyIsImVsZSIsImRpcmVjdGlvbiIsImRpcmVjdGlvbl9kYXRhIiwiZHJhd19pbmRleCIsImZyYW1lIiwidXBkYXRlc19wZXJfZnJhbWVzIiwidGltZXIiLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0Iiwic2V0U2hvdyIsImRyYXdTQyIsImZyYW0iLCJkcmFpbmQiLCJ0ZWxlcG9ydCIsImRlc3Ryb3lTQyIsImluZGV4T2YiLCJjdXJyZW50RGlhbG9ndWUiLCJkaWFsb2d1ZXMiLCJuZXh0RGlhbG9ndWUiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJjb25zb2xlIiwibG9nIiwiZGlhbG9ndWUiLCJjcmVhdGVEaWFsb2d1ZSIsImRlbGV0ZURpYWxvZ3VlIiwiZm9sbG93IiwiZGlhbG9ndWVPYmoiLCJjaGFyYWN0ZXJzcmMiLCJjcmVhdGVDaGFyQm94IiwiY2hhcnNyYyIsImNoYXJCb3giLCJ0cmlnZ2VyIiwiYmFja2dyb3VuZENoYW5nZSIsIm1vdXNlIiwidGlsZXgiLCJNYXRoIiwiZmxvb3IiLCJ0aWxleSIsIm1vZGlmeVRpbGUiLCJtc1BlckZyYW1lIiwibXNQcmV2IiwicGVyZm9ybWFuY2UiLCJub3ciLCJjYW52YXMiLCJnZXRNb3VzZVBvcyIsImluaXRNb3VzZSIsIkFycmF5IiwiZmlsbCIsImluaXRCYWNrZ3JvdW5kIiwibWluaUxpc3QiLCJtaW5pQ2FudmFzIiwiY3VycmVudEZyYW1lIiwiY2FudmVsZSIsImltZ2VsZSIsImluaXQiLCJhZGRlZGxlZnQiLCJiYWNrY2FudiIsIm1vdXNlUG9zMiIsImludGVydmFsX2xpc3QiLCJjdXJGcmEiLCJob3ZlckZ1bmMiLCJzZXRJbnRlcnZhbCIsInVwZGF0ZURyYWciLCJyZWN0MiIsImNsZWFySW50ZXJ2YWwiLCJpbmZvIiwiZGlzcGxheUluZm8iLCJpbml0TWluaSIsIm1pbmkiLCJtaW5pZWxlIiwicmVuZGVyU2hhZGVyIiwic2hhZCIsImV4dHJhX3N0eWxlIiwicmVuZGVyTGV2ZWwiLCJwYXRoQmxvY2siLCJyZW1vdmVTaGFkZXJzIiwic2hhZGxpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2hhZHdyYXAiLCJwYXRoIiwicG9pbnRlciIsInBvaW50VGltZSIsImJnIiwiQnV0dG9uIiwic3ByaXRlbnVtIiwiYnV0dG9uIiwidG9nZ2xlU2hha2UiLCJwcm9tcHRidXQiLCJjaGFuZ2VCYWNrZ3JvdW5kIiwidG9nZ2xlUG9pbnRlciIsImJ1dCIsInVwZGF0ZVBvaW50ZXIiLCJkeCIsImR5IiwibWFnIiwic3FydCIsInV4IiwidXkiLCJueCIsIm55IiwiaW5jb21pbmdfdGlsZSIsImoiLCJkZXRlY3RUaWxlIiwiaW5jbHVkZXMiLCJhbmdsZSIsImF0YW4iLCJQSSIsIm1vdmVUb3dhcmRzIiwiZ2FtZSIsInJhcHBlciIsImJhY2tncm91bmRDYW52YXMiLCJzb2xpZEJHcyIsImluaXRTaGFkZXJzIiwiY2FudmFzTGlzdCIsImFuaW1hdGVFdmVyeXRoaW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNOb3ciLCJtc1Bhc3NlZCIsImNvaW4iLCJkcmF3T2JqIiwic2MiLCJ0aGluZyIsInJlY3QxIiwicmlnaHQiLCJib3R0b20iLCJjaGVja0NvbGxpc2lvbiIsInJ1bkV2ZXJ5dGhpbmciLCJidXRPdiIsImdlbmVyYXRlQnV0dG9ucyIsImluaXRDYW52YXNlcyIsIm1pbmlyYXBwZXIiLCJtaW5pV3JhcHBlciIsImluaXRJbmZvU2NyZWVuIiwiaW5pdE90aGVyIiwiZGVidWdUb29sIiwiZGVidWdXcmFwIiwic2xpZGVyIiwic2xpZGVyMiIsImRlYnVnVG9vbHMiLCJpbml0RGVidWciXSwic291cmNlUm9vdCI6IiJ9